"""
APG Vulnerability Management - Pydantic Models

Enterprise vulnerability management models with automated scanning,
risk-based prioritization, and comprehensive remediation tracking.

Copyright Â© 2025 Datacraft
Author: Nyimbi Odero
Email: nyimbi@gmail.com
"""

from datetime import datetime, timedelta
from decimal import Decimal
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field, validator, root_validator
from pydantic import ConfigDict
from uuid_extensions import uuid7str


class VulnerabilitySeverity(str, Enum):
	CRITICAL = "critical"
	HIGH = "high"
	MEDIUM = "medium"
	LOW = "low"
	INFORMATIONAL = "informational"


class VulnerabilityStatus(str, Enum):
	NEW = "new"
	CONFIRMED = "confirmed"
	IN_PROGRESS = "in_progress"
	REMEDIATED = "remediated"
	MITIGATED = "mitigated"
	ACCEPTED = "accepted"
	FALSE_POSITIVE = "false_positive"
	DUPLICATE = "duplicate"


class ScanType(str, Enum):
	NETWORK_SCAN = "network_scan"
	WEB_APPLICATION = "web_application"
	DATABASE_SCAN = "database_scan"
	CONTAINER_SCAN = "container_scan"
	CLOUD_CONFIGURATION = "cloud_configuration"
	CODE_ANALYSIS = "code_analysis"
	DEPENDENCY_SCAN = "dependency_scan"
	COMPLIANCE_SCAN = "compliance_scan"


class RemediationType(str, Enum):
	PATCH = "patch"
	CONFIGURATION_CHANGE = "configuration_change"
	UPGRADE = "upgrade"
	WORKAROUND = "workaround"
	MITIGATION = "mitigation"
	REMOVAL = "removal"
	REPLACEMENT = "replacement"


class AssetType(str, Enum):
	SERVER = "server"
	WORKSTATION = "workstation"
	NETWORK_DEVICE = "network_device"
	WEB_APPLICATION = "web_application"
	DATABASE = "database"
	CONTAINER = "container"
	CLOUD_RESOURCE = "cloud_resource"
	MOBILE_DEVICE = "mobile_device"


class Vulnerability(BaseModel):
	"""Comprehensive vulnerability definition and tracking"""
	model_config = ConfigDict(
		extra='forbid',
		validate_by_name=True,
		validate_by_alias=True
	)
	
	id: str = Field(default_factory=uuid7str)
	tenant_id: str = Field(description="Tenant identifier")
	
	# Vulnerability identification
	vulnerability_id: str = Field(description="Unique vulnerability identifier")
	cve_id: Optional[str] = None
	cwe_id: Optional[str] = None
	vendor_advisory_id: Optional[str] = None
	
	# Basic information
	title: str = Field(description="Vulnerability title")
	description: str = Field(description="Detailed vulnerability description")
	severity: VulnerabilitySeverity
	cvss_score: Optional[Decimal] = Field(None, ge=0, le=10)
	cvss_vector: Optional[str] = None
	
	# Affected assets
	affected_assets: List[str] = Field(default_factory=list)
	asset_count: int = 0
	critical_assets_affected: int = 0
	
	# Vulnerability details
	vulnerability_type: str = Field(description="Type of vulnerability")
	attack_vector: Optional[str] = None
	attack_complexity: Optional[str] = None
	privileges_required: Optional[str] = None
	user_interaction: Optional[str] = None
	
	# Impact assessment
	confidentiality_impact: Optional[str] = None
	integrity_impact: Optional[str] = None
	availability_impact: Optional[str] = None
	business_impact_score: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	
	# Exploitation information
	exploit_available: bool = False
	exploit_maturity: Optional[str] = None
	exploitability_score: Decimal = Field(default=Decimal('0.0'), ge=0, le=10)
	in_the_wild: bool = False
	
	# Risk assessment
	risk_score: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	environmental_score: Optional[Decimal] = None
	temporal_score: Optional[Decimal] = None
	
	# Status and tracking
	status: VulnerabilityStatus = VulnerabilityStatus.NEW
	first_discovered: datetime = Field(default_factory=datetime.utcnow)
	last_seen: datetime = Field(default_factory=datetime.utcnow)
	
	# Remediation information
	remediation_available: bool = False
	remediation_type: Optional[RemediationType] = None
	remediation_complexity: Optional[str] = None
	estimated_remediation_time: Optional[timedelta] = None
	
	# Compliance and regulatory
	compliance_frameworks: List[str] = Field(default_factory=list)
	regulatory_requirements: List[str] = Field(default_factory=list)
	
	# Assignment and ownership
	assigned_to: Optional[str] = None
	owner_team: Optional[str] = None
	escalation_level: int = 0
	
	# Dates and SLAs
	target_remediation_date: Optional[datetime] = None
	sla_breach_date: Optional[datetime] = None
	actual_remediation_date: Optional[datetime] = None
	
	# References and documentation
	references: List[str] = Field(default_factory=list)
	vendor_links: List[str] = Field(default_factory=list)
	internal_notes: List[Dict[str, Any]] = Field(default_factory=list)
	
	# Scan context
	discovered_by_scan: Optional[str] = None
	scan_engine: Optional[str] = None
	detection_method: Optional[str] = None
	
	created_at: datetime = Field(default_factory=datetime.utcnow)
	updated_at: Optional[datetime] = None


class VulnerabilityScan(BaseModel):
	"""Vulnerability scanning campaign and configuration"""
	model_config = ConfigDict(
		extra='forbid',
		validate_by_name=True,
		validate_by_alias=True
	)
	
	id: str = Field(default_factory=uuid7str)
	tenant_id: str = Field(description="Tenant identifier")
	
	scan_name: str = Field(description="Scan campaign name")
	scan_type: ScanType
	scan_description: str = Field(description="Scan purpose and scope")
	
	# Scan configuration
	scan_targets: List[str] = Field(default_factory=list)
	target_networks: List[str] = Field(default_factory=list)
	target_applications: List[str] = Field(default_factory=list)
	excluded_targets: List[str] = Field(default_factory=list)
	
	# Scan parameters
	scan_profile: str = Field(description="Scan profile or template")
	scan_intensity: str = Field(default="normal")
	max_scan_duration: timedelta = Field(default=timedelta(hours=24))
	
	# Scheduling
	is_scheduled: bool = False
	schedule_expression: Optional[str] = None
	next_scheduled_run: Optional[datetime] = None
	
	# Scanner configuration
	scanner_engine: str = Field(description="Scanner engine/tool")
	scanner_version: str = Field(description="Scanner version")
	scanner_config: Dict[str, Any] = Field(default_factory=dict)
	
	# Execution tracking
	execution_count: int = 0
	last_execution: Optional[datetime] = None
	average_execution_time: Optional[timedelta] = None
	
	# Results summary
	total_vulnerabilities_found: int = 0
	critical_vulnerabilities: int = 0
	high_vulnerabilities: int = 0
	medium_vulnerabilities: int = 0
	low_vulnerabilities: int = 0
	
	# Scan quality metrics
	false_positive_rate: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	scan_coverage: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	detection_accuracy: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	
	# Compliance and approval
	requires_approval: bool = False
	approved_by: Optional[str] = None
	approved_at: Optional[datetime] = None
	
	# Integration settings
	auto_ticket_creation: bool = False
	notification_settings: Dict[str, Any] = Field(default_factory=dict)
	integration_webhooks: List[str] = Field(default_factory=list)
	
	is_active: bool = True
	created_by: str = Field(description="Scan creator")
	
	created_at: datetime = Field(default_factory=datetime.utcnow)
	updated_at: Optional[datetime] = None


class ScanExecution(BaseModel):
	"""Vulnerability scan execution instance"""
	model_config = ConfigDict(
		extra='forbid',
		validate_by_name=True,
		validate_by_alias=True
	)
	
	id: str = Field(default_factory=uuid7str)
	tenant_id: str = Field(description="Tenant identifier")
	scan_id: str = Field(description="Associated scan configuration")
	
	execution_name: str = Field(description="Execution instance name")
	execution_type: str = Field(description="Manual, scheduled, or triggered")
	
	# Execution parameters
	scan_targets: List[str] = Field(default_factory=list)
	execution_config: Dict[str, Any] = Field(default_factory=dict)
	
	# Execution status
	execution_status: str = Field(default="pending")
	progress_percentage: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	
	# Timing
	start_time: Optional[datetime] = None
	end_time: Optional[datetime] = None
	execution_duration: Optional[timedelta] = None
	
	# Results summary
	targets_scanned: int = 0
	vulnerabilities_found: int = 0
	new_vulnerabilities: int = 0
	resolved_vulnerabilities: int = 0
	
	# Execution details
	scan_logs: List[Dict[str, Any]] = Field(default_factory=list)
	error_messages: List[str] = Field(default_factory=list)
	warnings: List[str] = Field(default_factory=list)
	
	# Resource usage
	scanner_resources: Dict[str, Any] = Field(default_factory=dict)
	network_impact: Dict[str, Any] = Field(default_factory=dict)
	
	# Output artifacts
	scan_report_path: Optional[str] = None
	raw_output_path: Optional[str] = None
	processed_results_path: Optional[str] = None
	
	triggered_by: str = Field(description="User or system that triggered scan")
	created_at: datetime = Field(default_factory=datetime.utcnow)
	updated_at: Optional[datetime] = None


class Asset(BaseModel):
	"""Asset inventory and vulnerability context"""
	model_config = ConfigDict(
		extra='forbid',
		validate_by_name=True,
		validate_by_alias=True
	)
	
	id: str = Field(default_factory=uuid7str)
	tenant_id: str = Field(description="Tenant identifier")
	
	# Asset identification
	asset_name: str = Field(description="Asset name or hostname")
	asset_type: AssetType
	asset_identifier: str = Field(description="Unique asset identifier")
	
	# Network information
	ip_addresses: List[str] = Field(default_factory=list)
	mac_addresses: List[str] = Field(default_factory=list)
	network_segments: List[str] = Field(default_factory=list)
	
	# System information
	operating_system: Optional[str] = None
	os_version: Optional[str] = None
	architecture: Optional[str] = None
	installed_software: List[Dict[str, Any]] = Field(default_factory=list)
	
	# Business context
	business_criticality: str = Field(default="medium")
	business_function: Optional[str] = None
	data_classification: Optional[str] = None
	compliance_scope: List[str] = Field(default_factory=list)
	
	# Ownership and management
	asset_owner: Optional[str] = None
	technical_contact: Optional[str] = None
	business_contact: Optional[str] = None
	management_team: Optional[str] = None
	
	# Vulnerability summary
	total_vulnerabilities: int = 0
	critical_vulnerabilities: int = 0
	high_vulnerabilities: int = 0
	medium_vulnerabilities: int = 0
	low_vulnerabilities: int = 0
	
	# Risk metrics
	risk_score: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	exposure_score: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	
	# Scanning configuration
	scan_enabled: bool = True
	scan_frequency: Optional[str] = None
	last_scanned: Optional[datetime] = None
	next_scan_due: Optional[datetime] = None
	
	# Asset lifecycle
	deployment_date: Optional[datetime] = None
	end_of_life_date: Optional[datetime] = None
	retirement_planned: bool = False
	
	# Security controls
	security_controls: List[str] = Field(default_factory=list)
	compensating_controls: List[str] = Field(default_factory=list)
	security_exceptions: List[str] = Field(default_factory=list)
	
	# Discovery and inventory
	discovery_method: Optional[str] = None
	last_discovered: Optional[datetime] = None
	asset_tags: List[str] = Field(default_factory=list)
	
	is_active: bool = True
	created_at: datetime = Field(default_factory=datetime.utcnow)
	updated_at: Optional[datetime] = None


class RemediationPlan(BaseModel):
	"""Vulnerability remediation plan and tracking"""
	model_config = ConfigDict(
		extra='forbid',
		validate_by_name=True,
		validate_by_alias=True
	)
	
	id: str = Field(default_factory=uuid7str)
	tenant_id: str = Field(description="Tenant identifier")
	
	plan_name: str = Field(description="Remediation plan name")
	plan_description: str = Field(description="Plan description and objectives")
	
	# Affected vulnerabilities
	vulnerability_ids: List[str] = Field(default_factory=list)
	vulnerability_count: int = 0
	priority_vulnerabilities: int = 0
	
	# Remediation strategy
	remediation_type: RemediationType
	remediation_approach: str = Field(description="Remediation approach")
	remediation_steps: List[Dict[str, Any]] = Field(default_factory=list)
	
	# Resource requirements
	estimated_effort_hours: Decimal = Field(default=Decimal('0.0'))
	required_skills: List[str] = Field(default_factory=list)
	required_tools: List[str] = Field(default_factory=list)
	budget_estimate: Optional[Decimal] = None
	
	# Scheduling and timeline
	planned_start_date: datetime
	planned_completion_date: datetime
	actual_start_date: Optional[datetime] = None
	actual_completion_date: Optional[datetime] = None
	
	# Assignment and ownership
	plan_owner: str = Field(description="Plan owner")
	assigned_team: Optional[str] = None
	assigned_individuals: List[str] = Field(default_factory=list)
	
	# Risk and impact assessment
	business_impact: str = Field(description="Business impact of remediation")
	downtime_required: bool = False
	estimated_downtime: Optional[timedelta] = None
	risk_assessment: Dict[str, Any] = Field(default_factory=dict)
	
	# Dependencies and prerequisites
	dependencies: List[str] = Field(default_factory=list)
	prerequisites: List[str] = Field(default_factory=list)
	blocking_issues: List[str] = Field(default_factory=list)
	
	# Progress tracking
	plan_status: str = Field(default="planning")
	progress_percentage: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	completed_steps: List[str] = Field(default_factory=list)
	
	# Quality assurance
	testing_required: bool = True
	testing_plan: Optional[str] = None
	rollback_plan: Optional[str] = None
	success_criteria: List[str] = Field(default_factory=list)
	
	# Approval workflow
	requires_approval: bool = False
	approval_status: Optional[str] = None
	approved_by: Optional[str] = None
	approved_at: Optional[datetime] = None
	
	# Communication and reporting
	stakeholder_notifications: List[str] = Field(default_factory=list)
	progress_reports: List[Dict[str, Any]] = Field(default_factory=list)
	
	created_by: str = Field(description="Plan creator")
	created_at: datetime = Field(default_factory=datetime.utcnow)
	updated_at: Optional[datetime] = None


class VulnerabilityMetrics(BaseModel):
	"""Vulnerability management metrics and KPIs"""
	model_config = ConfigDict(
		extra='forbid',
		validate_by_name=True,
		validate_by_alias=True
	)
	
	id: str = Field(default_factory=uuid7str)
	tenant_id: str = Field(description="Tenant identifier")
	
	metric_period_start: datetime
	metric_period_end: datetime
	
	# Vulnerability inventory
	total_vulnerabilities: int = 0
	new_vulnerabilities: int = 0
	resolved_vulnerabilities: int = 0
	open_vulnerabilities: int = 0
	
	# Severity distribution
	critical_vulnerabilities: int = 0
	high_vulnerabilities: int = 0
	medium_vulnerabilities: int = 0
	low_vulnerabilities: int = 0
	informational_vulnerabilities: int = 0
	
	# Remediation metrics
	vulnerabilities_remediated: int = 0
	vulnerabilities_mitigated: int = 0
	mean_time_to_remediation: Optional[timedelta] = None
	median_time_to_remediation: Optional[timedelta] = None
	
	# SLA compliance
	sla_breaches: int = 0
	critical_sla_compliance: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	high_sla_compliance: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	overall_sla_compliance: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	
	# Scanning metrics
	scans_executed: int = 0
	scan_coverage: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	scan_frequency: Decimal = Field(default=Decimal('0.0'))
	false_positive_rate: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	
	# Asset metrics
	total_assets: int = 0
	assets_scanned: int = 0
	critical_assets_vulnerable: int = 0
	asset_coverage: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	
	# Risk metrics
	total_risk_score: Decimal = Field(default=Decimal('0.0'))
	average_risk_score: Decimal = Field(default=Decimal('0.0'))
	risk_reduction: Decimal = Field(default=Decimal('0.0'))
	exposure_reduction: Decimal = Field(default=Decimal('0.0'))
	
	# Trend analysis
	vulnerability_trend: str = Field(default="stable")  # increasing, decreasing, stable
	remediation_velocity: Decimal = Field(default=Decimal('0.0'))
	discovery_rate: Decimal = Field(default=Decimal('0.0'))
	
	# Team productivity
	active_remediation_plans: int = 0
	completed_remediation_plans: int = 0
	average_plan_completion_time: Optional[timedelta] = None
	
	# Compliance and regulatory
	compliance_violations: int = 0
	regulatory_findings: int = 0
	audit_readiness_score: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	
	# Business impact
	business_critical_vulnerabilities: int = 0
	potential_cost_avoidance: Optional[Decimal] = None
	security_posture_score: Decimal = Field(default=Decimal('0.0'), ge=0, le=100)
	
	created_at: datetime = Field(default_factory=datetime.utcnow)
	updated_at: Optional[datetime] = None


class VulnerabilityException(BaseModel):
	"""Vulnerability exception and risk acceptance"""
	model_config = ConfigDict(
		extra='forbid',
		validate_by_name=True,
		validate_by_alias=True
	)
	
	id: str = Field(default_factory=uuid7str)
	tenant_id: str = Field(description="Tenant identifier")
	
	vulnerability_id: str = Field(description="Associated vulnerability")
	asset_id: Optional[str] = None
	
	# Exception details
	exception_type: str = Field(description="Type of exception")
	exception_reason: str = Field(description="Reason for exception")
	business_justification: str = Field(description="Business justification")
	
	# Risk acceptance
	accepted_risk_level: VulnerabilitySeverity
	risk_owner: str = Field(description="Risk owner/acceptor")
	compensating_controls: List[str] = Field(default_factory=list)
	
	# Exception timeline
	exception_start_date: datetime = Field(default_factory=datetime.utcnow)
	exception_end_date: datetime
	review_date: Optional[datetime] = None
	
	# Approval and governance
	approved_by: str = Field(description="Exception approver")
	approval_date: datetime = Field(default_factory=datetime.utcnow)
	approval_level: str = Field(description="Level of approval required")
	
	# Monitoring and review
	monitoring_requirements: List[str] = Field(default_factory=list)
	review_frequency: Optional[str] = None
	next_review_date: Optional[datetime] = None
	
	# Exception status
	exception_status: str = Field(default="active")
	revocation_reason: Optional[str] = None
	revoked_by: Optional[str] = None
	revoked_at: Optional[datetime] = None
	
	# Documentation
	supporting_documentation: List[str] = Field(default_factory=list)
	review_notes: List[Dict[str, Any]] = Field(default_factory=list)
	
	created_by: str = Field(description="Exception requester")
	created_at: datetime = Field(default_factory=datetime.utcnow)
	updated_at: Optional[datetime] = None