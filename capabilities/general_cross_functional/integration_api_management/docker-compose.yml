# APG Integration API Management - Docker Compose for Development
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: iam-postgres
    environment:
      POSTGRES_DB: integration_api_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - iam-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d integration_api_management"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: iam-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_dev_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - iam-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # API Management Service
  api-management:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: iam-api-management
    environment:
      # Database configuration
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-secure_dev_password}@postgres:5432/integration_api_management
      - DATABASE_POOL_SIZE=10
      - DATABASE_MAX_OVERFLOW=20
      
      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_dev_password}@redis:6379/0
      - REDIS_POOL_SIZE=10
      
      # Application configuration
      - APG_ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - SECRET_KEY=${SECRET_KEY:-development-secret-key-change-in-production}
      
      # Gateway configuration
      - GATEWAY_HOST=0.0.0.0
      - GATEWAY_PORT=8081
      - GATEWAY_WORKERS=2
      
      # Security configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt-secret-key-change-in-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-encryption-key-change-in-production}
      
      # Monitoring configuration
      - METRICS_ENABLED=true
      - TRACING_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
    ports:
      - "8080:8080"  # API Management
      - "8081:8081"  # Gateway
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - api_data:/app/data
    networks:
      - iam-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Nginx Load Balancer/Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: iam-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - iam-network
    depends_on:
      - api-management
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: iam-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - iam-network
    depends_on:
      - api-management
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: iam-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    networks:
      - iam-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: iam-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
      - "9411:9411"    # Zipkin
    networks:
      - iam-network
    restart: unless-stopped

  # ElasticSearch for Logging
  elasticsearch:
    image: elasticsearch:8.10.0
    container_name: iam-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - iam-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Kibana Dashboard
  kibana:
    image: kibana:8.10.0
    container_name: iam-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - iam-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  # Filebeat Log Shipper
  filebeat:
    image: elastic/filebeat:8.10.0
    container_name: iam-filebeat
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/app/logs:ro
    networks:
      - iam-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# Network configuration
networks:
  iam-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16