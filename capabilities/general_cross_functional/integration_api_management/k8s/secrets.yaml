# APG Integration API Management - Kubernetes Secrets
# NOTE: These are template secrets. In production, use proper secret management tools like:
# - HashiCorp Vault
# - AWS Secrets Manager
# - Azure Key Vault
# - Google Secret Manager
# - Kubernetes External Secrets Operator

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: integration-api-management
  labels:
    app: postgres
    component: database
type: Opaque
data:
  # Base64 encoded values - CHANGE IN PRODUCTION
  username: cG9zdGdyZXM=  # postgres
  password: c2VjdXJlX3Byb2R1Y3Rpb25fcGFzc3dvcmQ=  # secure_production_password
  database: aW50ZWdyYXRpb25fYXBpX21hbmFnZW1lbnQ=  # integration_api_management
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: integration-api-management
  labels:
    app: redis
    component: cache
type: Opaque
data:
  # Base64 encoded values - CHANGE IN PRODUCTION
  password: c2VjdXJlX3JlZGlzX3Bhc3N3b3Jk  # secure_redis_password
---
apiVersion: v1
kind: Secret
metadata:
  name: api-management-secret
  namespace: integration-api-management
  labels:
    app: api-management
    component: application
type: Opaque
data:
  # Base64 encoded values - CHANGE IN PRODUCTION
  database-url: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnNlY3VyZV9wcm9kdWN0aW9uX3Bhc3N3b3JkQHBvc3RncmVzLXNlcnZpY2U6NTQzMi9pbnRlZ3JhdGlvbl9hcGlfbWFuYWdlbWVudA==  # Full DB connection string
  redis-url: cmVkaXM6Ly86c2VjdXJlX3JlZGlzX3Bhc3N3b3JkQHJlZGlzLXNlcnZpY2U6NjM3OS8w  # Full Redis connection string
  jwt-secret-key: and0LXNlY3JldC1rZXktMzItY2hhcmFjdGVycy1sb25nLWNoYW5nZS1pbi1wcm9kdWN0aW9u  # JWT secret (32+ chars)
  encryption-key: ZW5jcnlwdGlvbi1rZXktMzItY2hhcmFjdGVycy1sb25nLWNoYW5nZS1pbi1wcm9kdWN0aW9u  # Encryption key (32+ chars)
  secret-key: YXBwLXNlY3JldC1rZXktMzItY2hhcmFjdGVycy1sb25nLWNoYW5nZS1pbi1wcm9kdWN0aW9u  # App secret key (32+ chars)
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: integration-api-management
  labels:
    app: api-management
    component: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key - obtain from cert-manager or your CA
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...  # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...  # Base64 encoded private key
---
# Service Account for API Management
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-management-sa
  namespace: integration-api-management
  labels:
    app: api-management
automountServiceAccountToken: true
---
# Role for API Management Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: api-management-role
  namespace: integration-api-management
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
# Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: api-management-rolebinding
  namespace: integration-api-management
subjects:
- kind: ServiceAccount
  name: api-management-sa
  namespace: integration-api-management
roleRef:
  kind: Role
  name: api-management-role
  apiGroup: rbac.authorization.k8s.io
---
# Secret for monitoring components
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secret
  namespace: integration-api-management
  labels:
    component: monitoring
type: Opaque
data:
  # Base64 encoded values
  grafana-admin-user: YWRtaW4=  # admin
  grafana-admin-password: c2VjdXJlX2dyYWZhbmFfcGFzc3dvcmQ=  # secure_grafana_password
  prometheus-config: cHJvbWV0aGV1cy1jb25maWctaGFzaA==  # Configuration hash for validation