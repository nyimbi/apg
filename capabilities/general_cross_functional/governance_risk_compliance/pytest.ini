[tool:pytest]
# APG Governance, Risk & Compliance - PyTest Configuration
# Comprehensive test configuration for GRC capability

# Test discovery
testpaths = .
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Minimum version requirements
minversion = 7.0

# Add current directory to Python path
addopts = 
    --verbose
    --strict-markers
    --strict-config
    --tb=short
    --cov=.
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=95
    --asyncio-mode=auto
    --disable-warnings

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests across components
    performance: Performance and load testing
    ai_dependent: Tests requiring AI/ML services
    database_heavy: Database intensive tests
    async_test: Asynchronous test cases
    slow: Tests that take significant time to run
    external_service: Tests requiring external services
    security: Security-focused test cases
    compliance: Compliance validation tests

# Test timeout (in seconds)
timeout = 300

# Async configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = .
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */conftest.py
    */venv/*
    */env/*
    */.pytest_cache/*
    */htmlcov/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# HTML coverage report configuration
[coverage:html]
directory = htmlcov
title = APG GRC Capability Coverage Report

# XML coverage report configuration
[coverage:xml]
output = coverage.xml