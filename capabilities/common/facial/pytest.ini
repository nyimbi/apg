[tool:pytest]
# APG Facial Recognition - Pytest Configuration
# Comprehensive test configuration for the facial recognition capability

# Test discovery
testpaths = .
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version requirements
minversion = 6.0

# Add current directory to Python path
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=.
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=85
    --durations=10
    --maxfail=3

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for service interactions
    performance: Performance and benchmark tests
    security: Security and penetration tests
    api: API endpoint tests
    database: Database layer tests
    slow: Tests that take more than 5 seconds
    requires_network: Tests that require network access
    requires_gpu: Tests that require GPU acceleration

# Asyncio configuration
asyncio_mode = auto

# Test timeout (in seconds)
timeout = 300

# Warnings configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:sqlalchemy.*
    ignore::UserWarning:cryptography.*

# Logging configuration
log_auto_indent = true
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = .
omit = 
    test_*.py
    */__pycache__/*
    */venv/*
    */env/*
    .tox/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    @abstract
    @abstractmethod

[coverage:html]
directory = htmlcov
title = APG Facial Recognition Test Coverage