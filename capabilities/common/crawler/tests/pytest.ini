[tool:pytest]
# Pytest configuration for crawler tests

# Test discovery
testpaths = .
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Addopts - additional options
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --asyncio-mode=auto
    --cov=packages.crawlers
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --durations=10
    --maxfail=5

# Markers
markers =
    unit: Unit tests - test individual components in isolation
    integration: Integration tests - test component interactions
    functional: Functional tests - test complete workflows
    performance: Performance tests - test under load conditions
    security: Security tests - test against vulnerabilities
    usability: Usability tests - test user experience
    slow: Slow running tests (>5 seconds)
    external: Tests requiring external resources
    network: Tests requiring network access
    database: Tests requiring database access
    cache: Tests requiring cache access
    stealth: Tests for stealth capabilities
    bypass: Tests for bypass mechanisms
    parser: Tests for content parsing
    crawler: Tests for crawler functionality
    mock: Tests using mocks
    real: Tests using real services
    regression: Regression tests for known issues

# Test selection filters
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ImportWarning
    ignore::asyncio.coroutines.CoroWrapper:DeprecationWarning

# Asyncio configuration
asyncio_mode = auto

# Log configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = packages.crawlers
omit = 
    */tests/*
    */conftest.py
    */__pycache__/*
    */venv/*
    */virtualenv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml