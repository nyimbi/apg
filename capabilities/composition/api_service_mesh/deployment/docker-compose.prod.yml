version: '3.8'

services:
  # =============================================================================
  # APG API Service Mesh - Production Deployment
  # =============================================================================
  
  # Main Service Mesh Control Plane
  api-service-mesh:
    image: apg/api-service-mesh:2.1.0
    container_name: apg-service-mesh
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=apg_service_mesh
      - DB_USER=apg_mesh_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - LOG_LEVEL=INFO
      - ENABLE_AI_FEATURES=true
      - ENABLE_VOICE_CONTROL=true
      - ENABLE_3D_VISUALIZATION=true
      - ENABLE_FEDERATION=true
      - CLUSTER_ID=${CLUSTER_ID:-prod-cluster-1}
      - CLUSTER_REGION=${CLUSTER_REGION:-us-west-2}
    ports:
      - "8080:8080"   # Main API
      - "8443:8443"   # HTTPS API
      - "50051:50051" # gRPC Proxy
      - "9090:9090"   # Metrics
    volumes:
      - mesh_certs:/etc/service-mesh/certs
      - mesh_data:/var/lib/service-mesh
      - mesh_logs:/var/log/service-mesh
    depends_on:
      - postgres
      - redis
      - ollama
    networks:
      - apg-mesh-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: apg-mesh-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=apg_service_mesh
      - POSTGRES_USER=apg_mesh_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=en_US.UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - apg-mesh-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apg_mesh_user -d apg_service_mesh"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: apg-mesh-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - apg-mesh-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama AI Model Server
  ollama:
    image: ollama/ollama:latest
    container_name: apg-mesh-ollama
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_PORT=11434
      - OLLAMA_MODELS_DIR=/root/.ollama/models
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
      - ./scripts/setup-ollama-models.sh:/setup-models.sh
    networks:
      - apg-mesh-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 180s

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: apg-mesh-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - apg-mesh-network
    depends_on:
      - api-service-mesh

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: apg-mesh-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN_NAME}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - apg-mesh-network
    depends_on:
      - prometheus

  # NGINX Load Balancer and SSL Termination
  nginx:
    image: nginx:alpine
    container_name: apg-mesh-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - apg-mesh-network
    depends_on:
      - api-service-mesh
      - grafana

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: apg-mesh-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - JAEGER_DISABLED=false
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    volumes:
      - jaeger_data:/tmp
    networks:
      - apg-mesh-network

  # Elasticsearch for Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: apg-mesh-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=apg-mesh-es
      - cluster.name=apg-mesh-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - apg-mesh-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: apg-mesh-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    volumes:
      - kibana_data:/usr/share/kibana/data
    networks:
      - apg-mesh-network
    depends_on:
      - elasticsearch

  # Fluent Bit for Log Collection
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: apg-mesh-fluent-bit
    restart: unless-stopped
    volumes:
      - ./config/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - mesh_logs:/var/log/service-mesh:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - apg-mesh-network
    depends_on:
      - elasticsearch

  # Service Mesh Data Plane Proxy
  envoy-proxy:
    image: envoyproxy/envoy:v1.28-latest
    container_name: apg-mesh-envoy
    restart: unless-stopped
    ports:
      - "10000:10000"  # Admin interface
      - "8000:8000"    # HTTP proxy
      - "8443:8443"    # HTTPS proxy
    volumes:
      - ./config/envoy/envoy.yaml:/etc/envoy/envoy.yaml
      - mesh_certs:/etc/envoy/certs
    networks:
      - apg-mesh-network
    depends_on:
      - api-service-mesh
    command: ["envoy", "-c", "/etc/envoy/envoy.yaml", "--service-cluster", "apg-mesh-proxy"]

  # Consul for Service Discovery (Alternative)
  consul:
    image: consul:latest
    container_name: apg-mesh-consul
    restart: unless-stopped
    command: agent -server -bootstrap -ui -client=0.0.0.0
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    ports:
      - "8500:8500"  # HTTP API and UI
      - "8600:8600"  # DNS
    volumes:
      - consul_data:/consul/data
    networks:
      - apg-mesh-network

# =============================================================================
# Networks
# =============================================================================

networks:
  apg-mesh-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_models:
    driver: local
  mesh_certs:
    driver: local
  mesh_data:
    driver: local
  mesh_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  elasticsearch_data:
    driver: local
  kibana_data:
    driver: local
  consul_data:
    driver: local
  nginx_logs:
    driver: local