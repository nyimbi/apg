# APG Composition Production Deployment
# Docker Compose configuration for production deployment of the composition capability
# 
# Features:
# - High availability with multiple replicas
# - Production-grade PostgreSQL with replication
# - Redis cluster for caching and session management
# - Nginx load balancer with SSL termination
# - Comprehensive monitoring and logging
# - Backup and recovery automation
# - Security hardening

version: '3.8'

services:
  # Composition API Service
  composition-api:
    image: apg/composition:${COMPOSITION_VERSION:-latest}
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://composition_user:${DB_PASSWORD}@postgres-primary:5432/composition_db?sslmode=require
      - REDIS_URL=redis://redis-cluster:6379
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - APG_INTEGRATION_TOKEN=${APG_TOKEN}
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
      - SENTRY_DSN=${SENTRY_DSN}
    networks:
      - apg-composition-network
      - apg-shared-network
    volumes:
      - composition-logs:/app/logs
      - composition-data:/app/data
    depends_on:
      - postgres-primary
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    sysctls:
      - net.core.somaxconn=65535
    ulimits:
      nofile:
        soft: 65535
        hard: 65535

  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=composition_db
      - POSTGRES_USER=composition_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${REPLICATION_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - apg-composition-network
    ports:
      - "5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U composition_user -d composition_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Replica for Read Operations
  postgres-replica:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=composition_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGUSER=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
      - ./postgres/recovery.conf:/var/lib/postgresql/data/recovery.conf:ro
    networks:
      - apg-composition-network
    depends_on:
      - postgres-primary
    command: |
      bash -c "
      until pg_basebackup -h postgres-primary -D /var/lib/postgresql/data -U replicator -v -P -W;
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      postgres
      "

  # Redis Cluster for Caching and Sessions
  redis-cluster:
    image: redis:7-alpine
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - apg-composition-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Load Balancer and SSL Termination
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    networks:
      - apg-composition-network
      - apg-shared-network
    depends_on:
      - composition-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - apg-composition-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres-primary:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=grafana_user
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - apg-composition-network
    depends_on:
      - prometheus
      - postgres-primary

  # ELK Stack for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - apg-composition-network
    ports:
      - "9200:9200"

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - composition-logs:/app/logs:ro
    networks:
      - apg-composition-network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - apg-composition-network
    depends_on:
      - elasticsearch

  # Backup Service
  backup:
    image: apg/backup:latest
    environment:
      - DATABASE_URL=postgresql://composition_user:${DB_PASSWORD}@postgres-primary:5432/composition_db
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - backup-data:/backup
      - postgres-primary-data:/var/lib/postgresql/data:ro
    networks:
      - apg-composition-network
    depends_on:
      - postgres-primary

volumes:
  postgres-primary-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres/primary
  postgres-replica-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres/replica
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/redis
  composition-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /logs/composition
  composition-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local
  backup-data:
    driver: local

networks:
  apg-composition-network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.20.0.0/24
  apg-shared-network:
    external: true

secrets:
  db_password:
    external: true
  jwt_secret:
    external: true
  secret_key:
    external: true