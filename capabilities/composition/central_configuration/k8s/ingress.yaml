apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: central-config-ingress
  namespace: central-config
  labels:
    app: central-config
  annotations:
    # NGINX Ingress Controller
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "100"
    nginx.ingress.kubernetes.io/rate-limit-rps: "50"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS, PATCH"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options SAMEORIGIN always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' wss: https:;" always;
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/affinity-mode: "balanced"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Buffer sizes
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    
    # Certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: http01

spec:
  tls:
  - hosts:
    - central-config.yourdomain.com
    - api.central-config.yourdomain.com
    - web.central-config.yourdomain.com
    secretName: central-config-tls
  rules:
  # API endpoint
  - host: api.central-config.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: central-config-api-service
            port:
              number: 8000
  
  # Web interface
  - host: web.central-config.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: central-config-web-service
            port:
              number: 8080
  
  # Main domain (redirect to web)
  - host: central-config.yourdomain.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: central-config-api-service
            port:
              number: 8000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: central-config-web-service
            port:
              number: 8080

---
# Internal ingress for monitoring and admin tools
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: central-config-monitoring-ingress
  namespace: central-config
  labels:
    app: central-config-monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Central Config Monitoring'
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - monitoring.central-config.yourdomain.com
    secretName: central-config-monitoring-tls
  rules:
  - host: monitoring.central-config.yourdomain.com
    http:
      paths:
      # Prometheus
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090
      
      # Grafana
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000
      
      # Jaeger
      - path: /jaeger
        pathType: Prefix
        backend:
          service:
            name: jaeger-service
            port:
              number: 16686
      
      # Kibana
      - path: /kibana
        pathType: Prefix
        backend:
          service:
            name: kibana-service
            port:
              number: 5601