# APG Accounts Receivable - Kubernetes Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apg-ar-api
  namespace: apg-ar
  labels:
    app.kubernetes.io/name: apg-accounts-receivable
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: apg-accounts-receivable
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: apg-accounts-receivable
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: apg-ar-serviceaccount
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: apg-ar-api
        image: datacraft/apg-ar:1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: APG_ENVIRONMENT
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: apg-ar-database-secret
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: apg-ar-redis-secret
              key: url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: apg-ar-app-secret
              key: secret-key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: apg-ar-app-secret
              key: jwt-secret-key
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: apg-ar-app-secret
              key: encryption-key
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: config-volume
          mountPath: /etc/apg/ar
          readOnly: true
        - name: logs-volume
          mountPath: /var/log/ar
        - name: data-volume
          mountPath: /opt/apg/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      volumes:
      - name: config-volume
        configMap:
          name: apg-ar-config
      - name: logs-volume
        emptyDir: {}
      - name: data-volume
        persistentVolumeClaim:
          claimName: apg-ar-data-pvc
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# APG AR Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apg-ar-worker
  namespace: apg-ar
  labels:
    app.kubernetes.io/name: apg-accounts-receivable
    app.kubernetes.io/component: worker
    app.kubernetes.io/version: "1.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: apg-accounts-receivable
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: apg-accounts-receivable
        app.kubernetes.io/component: worker
        app.kubernetes.io/version: "1.0"
    spec:
      serviceAccountName: apg-ar-serviceaccount
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: apg-ar-worker
        image: datacraft/apg-ar:1.0
        imagePullPolicy: Always
        command: ["/opt/apg/scripts/worker.sh"]
        env:
        - name: APG_ENVIRONMENT
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: apg-ar-database-secret
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: apg-ar-redis-secret
              key: url
        - name: WORKER_CONCURRENCY
          value: "4"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/apg/ar
          readOnly: true
        - name: logs-volume
          mountPath: /var/log/ar
        - name: data-volume
          mountPath: /opt/apg/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      volumes:
      - name: config-volume
        configMap:
          name: apg-ar-config
      - name: logs-volume
        emptyDir: {}
      - name: data-volume
        persistentVolumeClaim:
          claimName: apg-ar-data-pvc
      restartPolicy: Always

---
# APG AR Scheduler Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apg-ar-scheduler
  namespace: apg-ar
  labels:
    app.kubernetes.io/name: apg-accounts-receivable
    app.kubernetes.io/component: scheduler
    app.kubernetes.io/version: "1.0"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: apg-accounts-receivable
      app.kubernetes.io/component: scheduler
  template:
    metadata:
      labels:
        app.kubernetes.io/name: apg-accounts-receivable
        app.kubernetes.io/component: scheduler
        app.kubernetes.io/version: "1.0"
    spec:
      serviceAccountName: apg-ar-serviceaccount
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: apg-ar-scheduler
        image: datacraft/apg-ar:1.0
        imagePullPolicy: Always
        command: ["/opt/apg/scripts/scheduler.sh"]
        env:
        - name: APG_ENVIRONMENT
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: apg-ar-database-secret
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: apg-ar-redis-secret
              key: url
        volumeMounts:
        - name: config-volume
          mountPath: /etc/apg/ar
          readOnly: true
        - name: logs-volume
          mountPath: /var/log/ar
        - name: data-volume
          mountPath: /opt/apg/data
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      volumes:
      - name: config-volume
        configMap:
          name: apg-ar-config
      - name: logs-volume
        emptyDir: {}
      - name: data-volume
        persistentVolumeClaim:
          claimName: apg-ar-data-pvc
      restartPolicy: Always