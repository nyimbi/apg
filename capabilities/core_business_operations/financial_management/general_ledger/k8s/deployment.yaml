# APG Financial Management General Ledger - Kubernetes Deployment
# Revolutionary AI-powered General Ledger System
# Â© 2025 Datacraft. All rights reserved.

apiVersion: v1
kind: Namespace
metadata:
  name: apg-general-ledger
  labels:
    name: apg-general-ledger
    app.kubernetes.io/name: general-ledger
    app.kubernetes.io/version: "1.0.0"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gl-config
  namespace: apg-general-ledger
data:
  config.json: |
    {
      "database": {
        "pool_size": 20,
        "max_overflow": 30,
        "pool_timeout": 30,
        "pool_recycle": 3600
      },
      "cache": {
        "default_timeout": 300,
        "max_memory": "512mb"
      },
      "ai_features": {
        "model": "gpt-4",
        "confidence_threshold": 0.8,
        "auto_posting_threshold": 0.9,
        "max_retries": 3
      },
      "performance": {
        "max_concurrent_requests": 1000,
        "request_timeout": 30,
        "batch_size": 100
      },
      "security": {
        "jwt_expiry": 3600,
        "rate_limit_per_minute": 100,
        "enable_cors": true
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: gl-secrets
  namespace: apg-general-ledger
type: Opaque
data:
  # Base64 encoded secrets
  database-url: cG9zdGdyZXNxbDovL2dsX3VzZXI6Z2xfcGFzc3dvcmRAcG9zdGdyZXM6NTQzMi9hcGdfZ2w=
  redis-url: cmVkaXM6Ly9yZWRpcy5hcGctZ2VuZXJhbC1sZWRnZXI6NjM3OQ==
  secret-key: eW91ci1zdXBlci1zZWNyZXQta2V5LWhlcmU=
  jwt-secret: eW91ci1qd3Qtc2VjcmV0LWtleS1oZXJl
  openai-api-key: c2stcHJvai15b3VyLW9wZW5haS1hcGkta2V5LWhlcmU=
  apg-api-key: eW91ci1hcGctcGxhdGZvcm0tYXBpLWtleS1oZXJl

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: general-ledger
  namespace: apg-general-ledger
  labels:
    app: general-ledger
    tier: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: general-ledger
  template:
    metadata:
      labels:
        app: general-ledger
        tier: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: general-ledger
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: general-ledger
        image: apg/general-ledger:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: PORT
          value: "8000"
        - name: WORKERS
          value: "4"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: gl-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: gl-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: gl-secrets
              key: secret-key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: gl-secrets
              key: jwt-secret
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: gl-secrets
              key: openai-api-key
        - name: APG_API_KEY
          valueFrom:
            secretKeyRef:
              name: gl-secrets
              key: apg-api-key
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /var/log/gl
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
      volumes:
      - name: config
        configMap:
          name: gl-config
      - name: logs
        emptyDir: {}
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: general-ledger
  namespace: apg-general-ledger
  labels:
    app: general-ledger
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: general-ledger

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: general-ledger
  namespace: apg-general-ledger
  labels:
    app: general-ledger

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: apg-general-ledger
  name: general-ledger
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: general-ledger
  namespace: apg-general-ledger
subjects:
- kind: ServiceAccount
  name: general-ledger
  namespace: apg-general-ledger
roleRef:
  kind: Role
  name: general-ledger
  apiGroup: rbac.authorization.k8s.io

---
# PostgreSQL Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: apg-general-ledger
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14-alpine
        env:
        - name: POSTGRES_DB
          value: "apg_gl"
        - name: POSTGRES_USER
          value: "gl_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - gl_user
            - -d
            - apg_gl
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - gl_user
            - -d
            - apg_gl
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: apg-general-ledger
spec:
  ports:
  - port: 5432
  selector:
    app: postgres

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: apg-general-ledger
type: Opaque
data:
  password: Z2xfcGFzc3dvcmQ=  # gl_password

---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: apg-general-ledger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server"]
        args: ["--appendonly", "yes", "--maxmemory", "512mb", "--maxmemory-policy", "allkeys-lru"]
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: apg-general-ledger
spec:
  ports:
  - port: 6379
  selector:
    app: redis

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: general-ledger-hpa
  namespace: apg-general-ledger
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: general-ledger
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: general-ledger-pdb
  namespace: apg-general-ledger
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: general-ledger

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: general-ledger-network-policy
  namespace: apg-general-ledger
spec:
  podSelector:
    matchLabels:
      app: general-ledger
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS outbound
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS