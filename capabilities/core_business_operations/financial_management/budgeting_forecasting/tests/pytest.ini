[tool:pytest]
# APG Budgeting & Forecasting - Pytest Configuration

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output configuration
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10
    --cov=budgeting_forecasting
    --cov-report=html:tests/coverage_html
    --cov-report=term-missing
    --cov-report=xml:tests/coverage.xml
    --junit-xml=tests/junit.xml

# Test markers
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow running tests (longer than 5 seconds)
    requires_db: Tests that require database connection
    requires_ml: Tests that require ML components
    requires_ai: Tests that require AI components
    performance: Performance and load tests
    smoke: Smoke tests for basic functionality
    regression: Regression tests
    security: Security-related tests

# Minimum version requirements
minversion = 7.0

# Test filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:asyncio
    ignore::UserWarning:pydantic

# Async test configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = budgeting_forecasting
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = True
skip_covered = False
precision = 2

[coverage:html]
directory = tests/coverage_html
title = APG Budgeting & Forecasting Coverage Report