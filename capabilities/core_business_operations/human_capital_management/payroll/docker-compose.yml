# APG Payroll Management - Docker Compose Configuration
# Â© 2025 Datacraft. All rights reserved.
# Author: Nyimbi Odero | APG Platform Architect

version: '3.8'

services:
  # PostgreSQL Database
  payroll-db:
    image: postgres:15-alpine
    container_name: apg-payroll-db
    environment:
      POSTGRES_DB: apg_payroll
      POSTGRES_USER: apg_payroll_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - payroll_db_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./seed_data.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5432:5432"
    networks:
      - apg-payroll-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apg_payroll_user -d apg_payroll"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  payroll-redis:
    image: redis:7-alpine
    container_name: apg-payroll-redis
    ports:
      - "6379:6379"
    volumes:
      - payroll_redis_data:/data
    networks:
      - apg-payroll-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payroll Application
  payroll-app:
    build:
      context: .
      target: production
    container_name: apg-payroll-app
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://apg_payroll_user:${POSTGRES_PASSWORD:-secure_password_change_me}@payroll-db:5432/apg_payroll
      
      # Redis Configuration
      REDIS_URL: redis://payroll-redis:6379/0
      
      # APG Platform Configuration
      APG_SECRET_KEY: ${APG_SECRET_KEY:-your-secret-key-change-in-production}
      APG_TENANT_MODE: multi
      APG_AUTH_TYPE: jwt
      
      # AI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AI_ENABLED: "true"
      
      # Security Configuration
      SECURITY_PASSWORD_SALT: ${SECURITY_PASSWORD_SALT:-your-salt-change-in-production}
      SECURITY_CSRF_ENABLED: "true"
      
      # Performance Configuration
      WORKERS: 4
      MAX_REQUESTS: 1000
      TIMEOUT: 120
      
      # Feature Flags
      REAL_TIME_ENABLED: "true"
      ANALYTICS_ENABLED: "true"
      CONVERSATIONAL_ENABLED: "true"
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      LOG_LEVEL: INFO
      
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - apg-payroll-network
    depends_on:
      payroll-db:
        condition: service_healthy
      payroll-redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  payroll-nginx:
    image: nginx:alpine
    container_name: apg-payroll-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    networks:
      - apg-payroll-network
    depends_on:
      - payroll-app
    restart: unless-stopped

  # Celery Worker for Background Tasks
  payroll-worker:
    build:
      context: .
      target: production
    container_name: apg-payroll-worker
    environment:
      DATABASE_URL: postgresql://apg_payroll_user:${POSTGRES_PASSWORD:-secure_password_change_me}@payroll-db:5432/apg_payroll
      REDIS_URL: redis://payroll-redis:6379/0
      CELERY_BROKER_URL: redis://payroll-redis:6379/1
      CELERY_RESULT_BACKEND: redis://payroll-redis:6379/2
    volumes:
      - ./logs:/app/logs
    networks:
      - apg-payroll-network
    depends_on:
      payroll-db:
        condition: service_healthy
      payroll-redis:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A payroll.celery worker --loglevel=info --concurrency=4

  # Celery Beat for Scheduled Tasks
  payroll-beat:
    build:
      context: .
      target: production
    container_name: apg-payroll-beat
    environment:
      DATABASE_URL: postgresql://apg_payroll_user:${POSTGRES_PASSWORD:-secure_password_change_me}@payroll-db:5432/apg_payroll
      REDIS_URL: redis://payroll-redis:6379/0
      CELERY_BROKER_URL: redis://payroll-redis:6379/1
      CELERY_RESULT_BACKEND: redis://payroll-redis:6379/2
    volumes:
      - ./logs:/app/logs
    networks:
      - apg-payroll-network
    depends_on:
      payroll-db:
        condition: service_healthy
      payroll-redis:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A payroll.celery beat --loglevel=info

  # Monitoring with Prometheus
  payroll-prometheus:
    image: prom/prometheus:latest
    container_name: apg-payroll-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - apg-payroll-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Dashboards
  payroll-grafana:
    image: grafana/grafana:latest
    container_name: apg-payroll-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - apg-payroll-network
    depends_on:
      - payroll-prometheus
    restart: unless-stopped

# Networks
networks:
  apg-payroll-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  payroll_db_data:
    driver: local
  payroll_redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local