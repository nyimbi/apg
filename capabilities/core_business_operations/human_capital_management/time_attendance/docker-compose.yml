version: '3.8'

services:
  # PostgreSQL Database for Time & Attendance
  postgres:
    image: postgres:15-alpine
    container_name: ta_postgres
    environment:
      POSTGRES_DB: time_attendance_db
      POSTGRES_USER: ta_user
      POSTGRES_PASSWORD: ta_secure_password_2025
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - ta_network
    restart: unless-stopped
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ta_user -d time_attendance_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: ta_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - ta_network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ta_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@datacraft.co.ke
      PGADMIN_DEFAULT_PASSWORD: admin_secure_2025
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ta_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  # Application Server (FastAPI + Flask-AppBuilder)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ta_app
    environment:
      - DATABASE_URL=postgresql+asyncpg://ta_user:ta_secure_password_2025@postgres:5432/time_attendance_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - SECRET_KEY=ta_super_secret_key_2025_development_only
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/__pycache__
    networks:
      - ta_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn api:app --host 0.0.0.0 --port 8000 --reload
      "

  # Grafana for Monitoring and Analytics
  grafana:
    image: grafana/grafana:latest
    container_name: ta_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin_2025
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ta_network
    restart: unless-stopped

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ta_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ta_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  ta_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16