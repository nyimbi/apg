"""
Alembic Environment Configuration for APG Time & Attendance

Database migration environment setup with multi-tenant support and
comprehensive schema management for the Time & Attendance capability.

Copyright Â© 2025 Datacraft
Author: Nyimbi Odero
Email: nyimbi@gmail.com
"""

import asyncio
import os
import sys
from logging.config import fileConfig
from sqlalchemy import pool
from sqlalchemy.engine import Connection
from sqlalchemy.ext.asyncio import async_engine_from_config
from alembic import context

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import Base
from config import get_config

# Alembic Config object
config = context.config

# Interpret the config file for Python logging
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Target metadata for autogenerate support
target_metadata = Base.metadata

# Get Time & Attendance configuration
ta_config = get_config()

def get_database_url():
    """Get database URL from configuration"""
    return (
        f"postgresql+asyncpg://{ta_config.database.username}:"
        f"{ta_config.database.password}@{ta_config.database.host}:"
        f"{ta_config.database.port}/{ta_config.database.database_name}"
    )

def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.
    """
    url = get_database_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        version_table_schema="ta_core",  # Store migration history in ta_core schema
        include_schemas=True,
        render_as_batch=False,
    )

    with context.begin_transaction():
        context.run_migrations()


def do_run_migrations(connection: Connection) -> None:
    """Run migrations with active database connection"""
    context.configure(
        connection=connection,
        target_metadata=target_metadata,
        version_table_schema="ta_core",  # Store migration history in ta_core schema
        include_schemas=True,
        render_as_batch=False,
        compare_type=True,
        compare_server_default=True,
        include_object=include_object,
    )

    with context.begin_transaction():
        context.run_migrations()


def include_object(object, name, type_, reflected, compare_to):
    """
    Include/exclude objects from migration generation
    
    This function determines which database objects should be included
    in autogenerated migrations.
    """
    # Skip tenant management schema in autogeneration
    # as it's managed separately
    if hasattr(object, 'schema') and object.schema == 'ta_tenant_management':
        return False
    
    # Include all objects in ta_core schema
    if hasattr(object, 'schema') and object.schema == 'ta_core':
        return True
    
    # Include tables without explicit schema (will use default)
    if type_ == "table" and not hasattr(object, 'schema'):
        return True
    
    # Include indexes
    if type_ == "index":
        return True
    
    # Include foreign keys
    if type_ == "foreign_key":
        return True
    
    # Exclude by default for safety
    return False


async def run_async_migrations() -> None:
    """Run migrations in async mode"""
    configuration = config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"] = get_database_url()
    
    connectable = async_engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    async with connectable.connect() as connection:
        await connection.run_sync(do_run_migrations)

    await connectable.dispose()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode."""
    asyncio.run(run_async_migrations())


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()