"""
{{project_name}} - Microservice
===============================

Generated by APG using {{base_template}} base template.
This microservice combines multiple capabilities into a focused service.
"""

import logging
import os
import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create FastAPI application
app = FastAPI(
    title="{{project_name}}",
    description="{{project_description}}",
    version="{{version}}"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Import and integrate capabilities
{% for capability in capabilities %}
try:
    from capabilities.{{capability}}.integration import integrate_{{capability}}
    integrate_{{capability}}(app)
    logger.info(f"Integrated capability: {{capability}}")
except ImportError as e:
    logger.warning(f"Could not integrate capability {{capability}}: {e}")
{% endfor %}

@app.get("/health")
async def health_check():
    """Service health check"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "{{project_name}}",
        "version": "{{version}}",
        "capabilities": {{capabilities|tojson}}
    }

if __name__ == "__main__":
    host = os.environ.get("HOST", "0.0.0.0")
    port = int(os.environ.get("PORT", 8000))
    
    logger.info(f"Starting {{project_name}} microservice on {host}:{port}")
    logger.info(f"Capabilities: {', '.join({{capabilities|tojson}})}")
    
    uvicorn.run(app, host=host, port=port)
