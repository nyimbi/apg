"""
{{project_name}} - Flask-AppBuilder Application
================================================

Generated by APG (Application Programming Generation) using {{base_template}} base template.
This application combines multiple capabilities into a cohesive Flask-AppBuilder application.
"""

import logging
import os
from datetime import datetime
from flask import Flask, request, jsonify
from flask_appbuilder import AppBuilder, SQLA
from flask_appbuilder.security.decorators import has_access

# Configure logging
logging.basicConfig(
    format='%(asctime)s:%(levelname)s:%(name)s:%(message)s',
    level=logging.INFO
)
log = logging.getLogger(__name__)

# Create Flask application
app = Flask(__name__)
app.config.from_object('config')

# Initialize Flask-AppBuilder
db = SQLA(app)
appbuilder = AppBuilder(app, db.session)

# Import capability modules
{% for capability in capabilities %}
try:
    from capabilities.{{capability}}.integration import integrate_{{capability}}
    integrate_{{capability}}(app, appbuilder, db)
    log.info(f"Integrated capability: {{capability}}")
except ImportError as e:
    log.warning(f"Could not integrate capability {{capability}}: {e}")
{% endfor %}

# Application health check
@app.route('/health')
def health_check():
    """Application health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'application': '{{project_name}}',
        'version': '{{version}}',
        'capabilities': {{capabilities|tojson}}
    })

# Initialize database
with app.app_context():
    try:
        db.create_all()
        log.info("Database tables created successfully")
    except Exception as e:
        log.error(f"Error creating database tables: {e}")

if __name__ == '__main__':
    # Development server configuration
    host = os.environ.get('FLASK_HOST', '127.0.0.1')
    port = int(os.environ.get('FLASK_PORT', 8080))
    debug = os.environ.get('FLASK_DEBUG', '1') == '1'
    
    log.info(f"Starting {{project_name}} on {host}:{port}")
    log.info(f"Capabilities enabled: {', '.join({{capabilities|tojson}})}")
    
    app.run(host=host, port=port, debug=debug)
