"""
Basic Authentication Integration
========================================

Integration logic for the Basic Authentication capability.
This module handles integrating the capability into the base application.
"""

import logging
from flask import Blueprint
from flask_appbuilder import BaseView

# Configure logging
log = logging.getLogger(__name__)

# Create capability blueprint
basic_authentication_bp = Blueprint(
    'basic_authentication',
    __name__,
    url_prefix='/auth/basic_authentication',
    template_folder='templates',
    static_folder='static'
)


def integrate_basic_authentication(app, appbuilder, db):
    """
    Integrate Basic Authentication capability into the application.
    
    Args:
        app: Flask application instance
        appbuilder: Flask-AppBuilder instance
        db: SQLAlchemy database instance
    """
    try:
        # Register blueprint
        app.register_blueprint(basic_authentication_bp)
        
        # Import and register models
        from .models import User, Role, Permission  # noqa
        
        # Import and register views
        from .views import UserView, RoleView, PermissionView  # noqa
        
        # Register views with AppBuilder
        appbuilder.add_view(
            UserView,
            "List Users",
            icon="fa-user",
            category="Security",
            category_icon="fa-shield"
        )
        appbuilder.add_view(
            RoleView, 
            "List Roles",
            icon="fa-users",
            category="Security"
        )
        appbuilder.add_view(
            PermissionView,
            "List Permissions", 
            icon="fa-key",
            category="Security"
        )
        
        # Apply configuration
        config_additions = {'AUTH_TYPE': 'AUTH_DB'}
        for key, value in config_additions.items():
            app.config[key] = value
        
        # Create default roles if they don't exist
        with app.app_context():
            # Create admin role
            admin_role = appbuilder.sm.find_role('Admin')
            if not admin_role:
                admin_role = appbuilder.sm.add_role('Admin')
            
            # Create public role  
            public_role = appbuilder.sm.find_role('Public')
            if not public_role:
                public_role = appbuilder.sm.add_role('Public')
        
        log.info(f"Successfully integrated Basic Authentication capability")
        
    except Exception as e:
        log.error(f"Failed to integrate Basic Authentication capability: {e}")
        raise


class BasicAuthenticationCapability:
    """
    Main capability class for Basic Authentication.
    
    This class provides the core functionality of the Basic Authentication capability.
    """
    
    def __init__(self, app=None, appbuilder=None, db=None):
        self.app = app
        self.appbuilder = appbuilder
        self.db = db
        
        if app is not None:
            self.init_app(app, appbuilder, db)
    
    def init_app(self, app, appbuilder, db):
        """Initialize the capability with the application"""
        self.app = app
        self.appbuilder = appbuilder
        self.db = db
        
        # Capability-specific initialization
        self._initialize_capability()
    
    def _initialize_capability(self):
        """Initialize capability-specific components"""
        # TODO: Implement capability initialization
        pass