"""
Role-Based Access Control Models
================================

Database models for Role-Based Access Control capability.
"""

from flask_appbuilder import Model
from flask_appbuilder.models.mixins import AuditMixin
from sqlalchemy import Column, Integer, String, Boolean, DateTime, Float, Text, ForeignKey, JSON
from sqlalchemy.orm import relationship
from datetime import datetime


class SecurityBaseModel(AuditMixin, Model):
	"""Base model for security entities"""
	__abstract__ = True
	
	created_at = Column(DateTime, default=datetime.utcnow)
	updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
	active = Column(Boolean, default=True)


# Add security-specific models based on capability

class Role(SecurityBaseModel):
	"""Role definition"""
	__tablename__ = 'rbac_roles'
	
	id = Column(Integer, primary_key=True)
	name = Column(String(128), unique=True, nullable=False)
	description = Column(Text)
	parent_role_id = Column(Integer, ForeignKey('rbac_roles.id'))
	level = Column(Integer, default=0)
	
	parent = relationship("Role", remote_side=[id])
	permissions = relationship("Permission", secondary="role_permissions", back_populates="roles")


class Permission(SecurityBaseModel):
	"""Permission definition"""
	__tablename__ = 'rbac_permissions'
	
	id = Column(Integer, primary_key=True)
	name = Column(String(128), unique=True, nullable=False)
	resource = Column(String(128))
	action = Column(String(64))
	description = Column(Text)
	
	roles = relationship("Role", secondary="role_permissions", back_populates="permissions")


class RolePermission(SecurityBaseModel):
	"""Role-Permission association"""
	__tablename__ = 'role_permissions'
	
	role_id = Column(Integer, ForeignKey('rbac_roles.id'), primary_key=True)
	permission_id = Column(Integer, ForeignKey('rbac_permissions.id'), primary_key=True)


class RoleAssignment(SecurityBaseModel):
	"""User role assignments"""
	__tablename__ = 'rbac_role_assignments'
	
	id = Column(Integer, primary_key=True)
	user_id = Column(Integer, nullable=False)
	role_id = Column(Integer, ForeignKey('rbac_roles.id'))
	assigned_by = Column(Integer)
	assigned_at = Column(DateTime, default=datetime.utcnow)
	expires_at = Column(DateTime)
	
	role = relationship("Role")

