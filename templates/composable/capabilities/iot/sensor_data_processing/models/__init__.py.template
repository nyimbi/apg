"""
Sensor Data Processing Models
=============================

Database models for Sensor Data Processing capability.
"""

from flask_appbuilder import Model
from flask_appbuilder.models.mixins import AuditMixin
from sqlalchemy import Column, Integer, String, Boolean, DateTime, Float, Text, ForeignKey
from sqlalchemy.orm import relationship
from datetime import datetime


class IoTBaseModel(AuditMixin, Model):
    """Base model for IoT entities"""
    __abstract__ = True
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    active = Column(Boolean, default=True)


# Add IoT-specific models based on capability

class Sensor(IoTBaseModel):
    """IoT sensor model"""
    __tablename__ = 'sensors'
    
    id = Column(Integer, primary_key=True)
    sensor_id = Column(String(128), unique=True, nullable=False)
    name = Column(String(256), nullable=False)
    sensor_type = Column(String(64))
    location = Column(String(256))
    unit = Column(String(32))
    min_value = Column(Float)
    max_value = Column(Float)
    
    readings = relationship("SensorReading", back_populates="sensor")


class SensorReading(IoTBaseModel):
    """Sensor data reading"""
    __tablename__ = 'sensor_readings'
    
    id = Column(Integer, primary_key=True)
    sensor_id = Column(Integer, ForeignKey('sensors.id'))
    value = Column(Float, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)
    quality = Column(String(32), default='good')
    
    sensor = relationship("Sensor", back_populates="readings")


class Alert(IoTBaseModel):
    """Sensor alert model"""
    __tablename__ = 'sensor_alerts'
    
    id = Column(Integer, primary_key=True)
    sensor_id = Column(Integer, ForeignKey('sensors.id'))
    alert_type = Column(String(64))
    message = Column(Text)
    severity = Column(String(32))
    acknowledged = Column(Boolean, default=False)

