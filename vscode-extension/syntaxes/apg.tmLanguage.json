{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "APG",
  "scopeName": "source.apg",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#booleans"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#entity-declarations"
    },
    {
      "include": "#database-keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#identifiers"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.apg",
          "begin": "//",
          "end": "$",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.apg"
            }
          }
        },
        {
          "name": "comment.block.apg",
          "begin": "/\\*",
          "end": "\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.apg"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.apg",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.apg",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.apg",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.apg",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.apg",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.apg",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "booleans": {
      "name": "constant.language.boolean.apg",
      "match": "\\b(true|false|null)\\b"
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.apg",
          "match": "\\b(if|else|for|while|return|break|continue|async|await)\\b"
        },
        {
          "name": "keyword.other.apg",
          "match": "\\b(module|version|description|author|license|import|export|from|as)\\b"
        },
        {
          "name": "storage.modifier.apg",
          "match": "\\b(static|const|readonly)\\b"
        }
      ]
    },
    "entity-declarations": {
      "patterns": [
        {
          "name": "storage.type.class.apg",
          "match": "\\b(agent|digital_twin|workflow|api|form|ui_component|notification|analytics)\\b"
        },
        {
          "name": "storage.type.database.apg",
          "match": "\\b(db|database)\\b"
        }
      ]
    },
    "database-keywords": {
      "patterns": [
        {
          "name": "keyword.other.database.apg",
          "match": "\\b(schema|table|view|procedure|function|trigger|index|constraint)\\b"
        },
        {
          "name": "keyword.other.database.modifier.apg",
          "match": "\\b(pk|primary_key|unique|not_null|default|ref|cascade|restrict)\\b"
        },
        {
          "name": "keyword.other.database.vector.apg",
          "match": "\\b(vector|embedding|halfvec|sparsevec|dimensions|normalized|sparse)\\b"
        },
        {
          "name": "keyword.other.database.method.apg",
          "match": "\\b(hnsw|ivfflat|cosine|euclidean|dot_product|manhattan|hamming)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.apg",
          "match": "\\b(str|int|float|bool|void|any|null)\\b"
        },
        {
          "name": "storage.type.collection.apg",
          "match": "\\b(list|dict|set|tuple)\\b"
        },
        {
          "name": "storage.type.database.apg",
          "match": "\\b(serial|varchar|text|timestamp|decimal|json|jsonb|uuid|inet|cidr|macaddr)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.apg",
          "match": "(=|\\+=|-=|\\*=|/=|%=)"
        },
        {
          "name": "keyword.operator.comparison.apg",
          "match": "(==|!=|<|>|<=|>=)"
        },
        {
          "name": "keyword.operator.logical.apg",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.arithmetic.apg",
          "match": "(\\+|-|\\*|/|%|\\*\\*)"
        },
        {
          "name": "keyword.operator.other.apg",
          "match": "(\\.|->|\\[|\\]|\\(|\\))"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "entity.name.type.class.apg",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "entity.name.function.apg",
          "match": "\\b[a-z_][a-zA-Z0-9_]*(?=\\s*[:(])"
        },
        {
          "name": "variable.other.apg",
          "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.apg",
          "match": ";"
        },
        {
          "name": "punctuation.separator.comma.apg",
          "match": ","
        },
        {
          "name": "punctuation.definition.block.apg",
          "match": "[{}]"
        },
        {
          "name": "punctuation.definition.parameters.apg",
          "match": "[()]"
        },
        {
          "name": "punctuation.definition.array.apg",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.separator.key-value.apg",
          "match": ":"
        }
      ]
    }
  }
}