# Generated from /Volumes/Media/src/pjs/appgen/lang/apg.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,245,1252,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,1,0,3,0,238,8,0,1,0,3,0,241,
        8,0,1,0,4,0,244,8,0,11,0,12,0,245,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
        3,1,4,1,4,1,4,3,4,259,8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,5,7,268,8,
        7,10,7,12,7,271,9,7,1,7,3,7,274,8,7,1,8,1,8,1,8,5,8,279,8,8,10,8,
        12,8,282,9,8,1,8,3,8,285,8,8,1,9,1,9,1,9,5,9,290,8,9,10,9,12,9,293,
        9,9,1,9,3,9,296,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,315,8,10,1,11,1,11,
        1,11,5,11,320,8,11,10,11,12,11,323,9,11,1,11,3,11,326,8,11,1,12,
        1,12,1,12,1,12,3,12,332,8,12,1,13,1,13,4,13,336,8,13,11,13,12,13,
        337,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,5,16,
        351,8,16,10,16,12,16,354,9,16,1,16,3,16,357,8,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,3,17,366,8,17,3,17,368,8,17,1,17,1,17,3,17,372,
        8,17,1,17,3,17,375,8,17,1,17,3,17,378,8,17,1,17,3,17,381,8,17,1,
        17,3,17,384,8,17,1,17,3,17,387,8,17,1,17,3,17,390,8,17,1,17,3,17,
        393,8,17,1,17,3,17,396,8,17,3,17,398,8,17,1,18,1,18,1,18,1,18,1,
        18,1,18,1,19,1,19,1,19,1,19,3,19,410,8,19,1,20,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,
        22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,
        25,1,25,1,25,1,25,1,25,1,25,5,25,448,8,25,10,25,12,25,451,9,25,1,
        25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,463,8,26,3,
        26,465,8,26,1,26,3,26,468,8,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,30,1,30,4,30,484,8,30,11,30,12,30,485,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,499,
        8,31,1,32,1,32,1,32,1,32,4,32,505,8,32,11,32,12,32,506,1,32,1,32,
        1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,3,34,526,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,
        1,37,1,37,1,37,1,37,1,37,1,37,3,37,542,8,37,1,37,1,37,1,37,1,37,
        4,37,548,8,37,11,37,12,37,549,1,37,1,37,1,38,1,38,1,38,5,38,557,
        8,38,10,38,12,38,560,9,38,1,39,1,39,1,40,1,40,1,40,5,40,567,8,40,
        10,40,12,40,570,9,40,1,40,3,40,573,8,40,1,41,1,41,1,41,1,41,3,41,
        579,8,41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,3,43,646,8,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
        1,45,5,45,657,8,45,10,45,12,45,660,9,45,1,45,3,45,663,8,45,1,45,
        1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,676,8,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,3,46,706,8,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,3,48,719,8,48,1,49,1,49,3,49,723,8,49,1,49,1,49,1,
        49,1,49,1,49,3,49,730,8,49,1,49,1,49,1,49,1,49,1,50,1,50,3,50,738,
        8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,52,
        1,52,1,52,1,52,3,52,755,8,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,
        1,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,60,1,60,1,60,5,60,783,8,60,10,60,12,60,786,9,60,
        1,60,3,60,789,8,60,1,61,1,61,1,61,3,61,794,8,61,1,61,1,61,1,61,1,
        61,1,61,3,61,801,8,61,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,64,1,
        64,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,
        68,1,68,1,69,1,69,1,69,1,69,1,69,3,69,831,8,69,1,69,1,69,1,69,1,
        69,1,69,1,69,3,69,839,8,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,
        71,1,71,3,71,850,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,859,
        8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,5,73,870,8,73,
        10,73,12,73,873,9,73,1,74,1,74,1,74,3,74,878,8,74,1,74,1,74,1,74,
        1,74,1,74,3,74,885,8,74,1,75,1,75,1,75,5,75,890,8,75,10,75,12,75,
        893,9,75,1,75,3,75,896,8,75,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,
        77,1,78,1,78,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,
        80,1,80,1,81,1,81,1,81,3,81,923,8,81,1,82,1,82,1,82,1,82,1,83,1,
        83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,
        86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
        86,1,86,1,86,3,86,959,8,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,
        89,1,89,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,980,
        8,91,1,91,3,91,983,8,91,1,92,1,92,1,93,1,93,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,3,94,1085,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,5,94,1101,8,94,10,94,12,94,1104,9,94,1,
        95,1,95,1,95,5,95,1109,8,95,10,95,12,95,1112,9,95,1,95,3,95,1115,
        8,95,1,96,1,96,1,96,1,96,3,96,1121,8,96,1,97,1,97,1,98,1,98,1,99,
        1,99,1,99,1,99,3,99,1131,8,99,1,99,3,99,1134,8,99,1,100,1,100,1,
        101,1,101,4,101,1140,8,101,11,101,12,101,1141,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,4,102,1151,8,102,11,102,12,102,1152,1,102,
        1,102,1,103,1,103,1,104,1,104,1,105,1,105,1,106,1,106,1,106,5,106,
        1166,8,106,10,106,12,106,1169,9,106,1,106,3,106,1172,8,106,1,107,
        1,107,1,107,3,107,1177,8,107,1,107,1,107,1,107,1,107,5,107,1183,
        8,107,10,107,12,107,1186,9,107,1,107,1,107,1,107,3,107,1191,8,107,
        1,108,1,108,1,108,1,108,1,109,1,109,1,109,3,109,1200,8,109,1,109,
        1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,3,110,1211,8,110,
        1,111,1,111,1,112,1,112,1,113,1,113,1,113,1,113,4,113,1221,8,113,
        11,113,12,113,1222,1,113,1,113,1,114,1,114,1,115,1,115,1,115,1,115,
        1,115,4,115,1234,8,115,11,115,12,115,1235,1,115,1,115,1,116,1,116,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1250,8,117,
        1,117,0,1,188,118,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
        212,214,216,218,220,222,224,226,228,230,232,234,0,8,5,0,185,185,
        206,208,214,214,217,217,226,226,1,0,4,6,1,0,219,219,1,0,72,75,2,
        0,105,105,116,116,2,0,101,101,123,123,3,0,102,102,118,118,178,178,
        3,0,107,109,113,114,117,117,1374,0,237,1,0,0,0,2,249,1,0,0,0,4,251,
        1,0,0,0,6,253,1,0,0,0,8,258,1,0,0,0,10,260,1,0,0,0,12,262,1,0,0,
        0,14,264,1,0,0,0,16,275,1,0,0,0,18,286,1,0,0,0,20,297,1,0,0,0,22,
        316,1,0,0,0,24,331,1,0,0,0,26,335,1,0,0,0,28,339,1,0,0,0,30,345,
        1,0,0,0,32,347,1,0,0,0,34,397,1,0,0,0,36,399,1,0,0,0,38,409,1,0,
        0,0,40,411,1,0,0,0,42,417,1,0,0,0,44,423,1,0,0,0,46,429,1,0,0,0,
        48,435,1,0,0,0,50,441,1,0,0,0,52,467,1,0,0,0,54,469,1,0,0,0,56,473,
        1,0,0,0,58,477,1,0,0,0,60,483,1,0,0,0,62,498,1,0,0,0,64,500,1,0,
        0,0,66,510,1,0,0,0,68,525,1,0,0,0,70,527,1,0,0,0,72,533,1,0,0,0,
        74,535,1,0,0,0,76,553,1,0,0,0,78,561,1,0,0,0,80,563,1,0,0,0,82,574,
        1,0,0,0,84,580,1,0,0,0,86,645,1,0,0,0,88,647,1,0,0,0,90,652,1,0,
        0,0,92,705,1,0,0,0,94,707,1,0,0,0,96,718,1,0,0,0,98,720,1,0,0,0,
        100,735,1,0,0,0,102,748,1,0,0,0,104,754,1,0,0,0,106,756,1,0,0,0,
        108,758,1,0,0,0,110,760,1,0,0,0,112,762,1,0,0,0,114,764,1,0,0,0,
        116,766,1,0,0,0,118,772,1,0,0,0,120,779,1,0,0,0,122,793,1,0,0,0,
        124,802,1,0,0,0,126,804,1,0,0,0,128,806,1,0,0,0,130,811,1,0,0,0,
        132,813,1,0,0,0,134,819,1,0,0,0,136,823,1,0,0,0,138,825,1,0,0,0,
        140,845,1,0,0,0,142,847,1,0,0,0,144,860,1,0,0,0,146,866,1,0,0,0,
        148,877,1,0,0,0,150,886,1,0,0,0,152,897,1,0,0,0,154,899,1,0,0,0,
        156,905,1,0,0,0,158,907,1,0,0,0,160,909,1,0,0,0,162,922,1,0,0,0,
        164,924,1,0,0,0,166,928,1,0,0,0,168,930,1,0,0,0,170,937,1,0,0,0,
        172,958,1,0,0,0,174,960,1,0,0,0,176,965,1,0,0,0,178,967,1,0,0,0,
        180,969,1,0,0,0,182,982,1,0,0,0,184,984,1,0,0,0,186,986,1,0,0,0,
        188,1084,1,0,0,0,190,1105,1,0,0,0,192,1120,1,0,0,0,194,1122,1,0,
        0,0,196,1124,1,0,0,0,198,1126,1,0,0,0,200,1135,1,0,0,0,202,1139,
        1,0,0,0,204,1143,1,0,0,0,206,1156,1,0,0,0,208,1158,1,0,0,0,210,1160,
        1,0,0,0,212,1162,1,0,0,0,214,1173,1,0,0,0,216,1192,1,0,0,0,218,1196,
        1,0,0,0,220,1210,1,0,0,0,222,1212,1,0,0,0,224,1214,1,0,0,0,226,1216,
        1,0,0,0,228,1226,1,0,0,0,230,1228,1,0,0,0,232,1239,1,0,0,0,234,1249,
        1,0,0,0,236,238,3,24,12,0,237,236,1,0,0,0,237,238,1,0,0,0,238,240,
        1,0,0,0,239,241,3,28,14,0,240,239,1,0,0,0,240,241,1,0,0,0,241,243,
        1,0,0,0,242,244,3,60,30,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,
        1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,248,5,0,0,1,248,1,1,
        0,0,0,249,250,5,233,0,0,250,3,1,0,0,0,251,252,7,0,0,0,252,5,1,0,
        0,0,253,254,5,129,0,0,254,7,1,0,0,0,255,259,5,128,0,0,256,257,5,
        128,0,0,257,259,5,128,0,0,258,255,1,0,0,0,258,256,1,0,0,0,259,9,
        1,0,0,0,260,261,5,243,0,0,261,11,1,0,0,0,262,263,3,10,5,0,263,13,
        1,0,0,0,264,269,3,6,3,0,265,266,5,103,0,0,266,268,3,6,3,0,267,265,
        1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,273,
        1,0,0,0,271,269,1,0,0,0,272,274,5,103,0,0,273,272,1,0,0,0,273,274,
        1,0,0,0,274,15,1,0,0,0,275,280,3,10,5,0,276,277,5,103,0,0,277,279,
        3,10,5,0,278,276,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,
        1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,283,285,5,103,0,0,284,283,
        1,0,0,0,284,285,1,0,0,0,285,17,1,0,0,0,286,291,3,8,4,0,287,288,5,
        103,0,0,288,290,3,8,4,0,289,287,1,0,0,0,290,293,1,0,0,0,291,289,
        1,0,0,0,291,292,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,294,296,
        5,103,0,0,295,294,1,0,0,0,295,296,1,0,0,0,296,19,1,0,0,0,297,298,
        3,10,5,0,298,314,5,107,0,0,299,315,3,10,5,0,300,315,3,8,4,0,301,
        302,5,112,0,0,302,303,3,18,9,0,303,304,5,121,0,0,304,315,1,0,0,0,
        305,306,5,112,0,0,306,307,3,16,8,0,307,308,5,121,0,0,308,315,1,0,
        0,0,309,315,3,6,3,0,310,311,5,112,0,0,311,312,3,14,7,0,312,313,5,
        121,0,0,313,315,1,0,0,0,314,299,1,0,0,0,314,300,1,0,0,0,314,301,
        1,0,0,0,314,305,1,0,0,0,314,309,1,0,0,0,314,310,1,0,0,0,315,21,1,
        0,0,0,316,321,3,20,10,0,317,318,5,103,0,0,318,320,3,20,10,0,319,
        317,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,
        325,1,0,0,0,323,321,1,0,0,0,324,326,5,103,0,0,325,324,1,0,0,0,325,
        326,1,0,0,0,326,23,1,0,0,0,327,328,5,197,0,0,328,332,3,26,13,0,329,
        330,5,198,0,0,330,332,3,26,13,0,331,327,1,0,0,0,331,329,1,0,0,0,
        332,25,1,0,0,0,333,336,3,16,8,0,334,336,3,18,9,0,335,333,1,0,0,0,
        335,334,1,0,0,0,336,337,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,
        338,27,1,0,0,0,339,340,5,220,0,0,340,341,3,30,15,0,341,342,5,110,
        0,0,342,343,3,32,16,0,343,344,5,119,0,0,344,29,1,0,0,0,345,346,3,
        12,6,0,346,31,1,0,0,0,347,352,3,34,17,0,348,349,5,103,0,0,349,351,
        3,34,17,0,350,348,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,
        1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,355,357,5,103,0,0,356,355,
        1,0,0,0,356,357,1,0,0,0,357,33,1,0,0,0,358,359,5,1,0,0,359,360,5,
        107,0,0,360,398,3,8,4,0,361,362,5,235,0,0,362,365,5,107,0,0,363,
        366,5,136,0,0,364,366,3,8,4,0,365,363,1,0,0,0,365,364,1,0,0,0,366,
        368,1,0,0,0,367,361,1,0,0,0,367,368,1,0,0,0,368,398,1,0,0,0,369,
        398,3,54,27,0,370,372,3,58,29,0,371,370,1,0,0,0,371,372,1,0,0,0,
        372,398,1,0,0,0,373,375,3,36,18,0,374,373,1,0,0,0,374,375,1,0,0,
        0,375,398,1,0,0,0,376,378,3,40,20,0,377,376,1,0,0,0,377,378,1,0,
        0,0,378,398,1,0,0,0,379,381,3,42,21,0,380,379,1,0,0,0,380,381,1,
        0,0,0,381,398,1,0,0,0,382,384,3,44,22,0,383,382,1,0,0,0,383,384,
        1,0,0,0,384,398,1,0,0,0,385,387,3,46,23,0,386,385,1,0,0,0,386,387,
        1,0,0,0,387,398,1,0,0,0,388,390,3,48,24,0,389,388,1,0,0,0,389,390,
        1,0,0,0,390,398,1,0,0,0,391,393,3,50,25,0,392,391,1,0,0,0,392,393,
        1,0,0,0,393,398,1,0,0,0,394,396,3,22,11,0,395,394,1,0,0,0,395,396,
        1,0,0,0,396,398,1,0,0,0,397,358,1,0,0,0,397,367,1,0,0,0,397,369,
        1,0,0,0,397,371,1,0,0,0,397,374,1,0,0,0,397,377,1,0,0,0,397,380,
        1,0,0,0,397,383,1,0,0,0,397,386,1,0,0,0,397,389,1,0,0,0,397,392,
        1,0,0,0,397,395,1,0,0,0,398,35,1,0,0,0,399,400,5,2,0,0,400,401,5,
        107,0,0,401,402,5,110,0,0,402,403,3,38,19,0,403,404,5,119,0,0,404,
        37,1,0,0,0,405,406,5,3,0,0,406,407,5,107,0,0,407,410,7,1,0,0,408,
        410,3,22,11,0,409,405,1,0,0,0,409,408,1,0,0,0,410,39,1,0,0,0,411,
        412,5,7,0,0,412,413,5,107,0,0,413,414,5,110,0,0,414,415,3,22,11,
        0,415,416,5,119,0,0,416,41,1,0,0,0,417,418,5,8,0,0,418,419,5,107,
        0,0,419,420,5,110,0,0,420,421,3,22,11,0,421,422,5,119,0,0,422,43,
        1,0,0,0,423,424,5,9,0,0,424,425,5,107,0,0,425,426,5,110,0,0,426,
        427,3,22,11,0,427,428,5,119,0,0,428,45,1,0,0,0,429,430,5,10,0,0,
        430,431,5,107,0,0,431,432,5,110,0,0,432,433,3,22,11,0,433,434,5,
        119,0,0,434,47,1,0,0,0,435,436,5,11,0,0,436,437,5,107,0,0,437,438,
        5,110,0,0,438,439,3,22,11,0,439,440,5,119,0,0,440,49,1,0,0,0,441,
        442,5,196,0,0,442,443,5,107,0,0,443,444,5,112,0,0,444,449,3,52,26,
        0,445,446,5,103,0,0,446,448,3,52,26,0,447,445,1,0,0,0,448,451,1,
        0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,452,1,0,0,0,451,449,1,
        0,0,0,452,453,5,121,0,0,453,51,1,0,0,0,454,468,5,200,0,0,455,468,
        5,237,0,0,456,468,5,191,0,0,457,468,5,179,0,0,458,464,5,225,0,0,
        459,462,5,192,0,0,460,463,3,4,2,0,461,463,3,8,4,0,462,460,1,0,0,
        0,462,461,1,0,0,0,463,465,1,0,0,0,464,459,1,0,0,0,464,465,1,0,0,
        0,465,468,1,0,0,0,466,468,3,8,4,0,467,454,1,0,0,0,467,455,1,0,0,
        0,467,456,1,0,0,0,467,457,1,0,0,0,467,458,1,0,0,0,467,466,1,0,0,
        0,468,53,1,0,0,0,469,470,5,201,0,0,470,471,5,107,0,0,471,472,3,56,
        28,0,472,55,1,0,0,0,473,474,5,112,0,0,474,475,3,18,9,0,475,476,5,
        121,0,0,476,57,1,0,0,0,477,478,5,229,0,0,478,479,5,107,0,0,479,480,
        3,8,4,0,480,59,1,0,0,0,481,484,3,62,31,0,482,484,3,168,84,0,483,
        481,1,0,0,0,483,482,1,0,0,0,484,485,1,0,0,0,485,483,1,0,0,0,485,
        486,1,0,0,0,486,61,1,0,0,0,487,499,3,64,32,0,488,499,3,70,35,0,489,
        499,3,118,59,0,490,499,3,74,37,0,491,499,3,138,69,0,492,499,3,154,
        77,0,493,499,3,142,71,0,494,499,3,100,50,0,495,499,3,204,102,0,496,
        499,3,226,113,0,497,499,3,218,109,0,498,487,1,0,0,0,498,488,1,0,
        0,0,498,489,1,0,0,0,498,490,1,0,0,0,498,491,1,0,0,0,498,492,1,0,
        0,0,498,493,1,0,0,0,498,494,1,0,0,0,498,495,1,0,0,0,498,496,1,0,
        0,0,498,497,1,0,0,0,499,63,1,0,0,0,500,501,5,12,0,0,501,502,3,66,
        33,0,502,504,5,110,0,0,503,505,3,68,34,0,504,503,1,0,0,0,505,506,
        1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,509,
        5,119,0,0,509,65,1,0,0,0,510,511,3,12,6,0,511,67,1,0,0,0,512,513,
        5,13,0,0,513,514,5,107,0,0,514,526,3,8,4,0,515,516,5,14,0,0,516,
        517,5,107,0,0,517,526,5,134,0,0,518,519,5,15,0,0,519,520,5,107,0,
        0,520,526,3,18,9,0,521,522,5,16,0,0,522,523,5,107,0,0,523,526,3,
        18,9,0,524,526,3,20,10,0,525,512,1,0,0,0,525,515,1,0,0,0,525,518,
        1,0,0,0,525,521,1,0,0,0,525,524,1,0,0,0,526,69,1,0,0,0,527,528,5,
        204,0,0,528,529,3,72,36,0,529,530,5,110,0,0,530,531,3,80,40,0,531,
        532,5,119,0,0,532,71,1,0,0,0,533,534,3,12,6,0,534,73,1,0,0,0,535,
        536,5,227,0,0,536,541,3,78,39,0,537,538,5,111,0,0,538,539,3,76,38,
        0,539,540,5,120,0,0,540,542,1,0,0,0,541,537,1,0,0,0,541,542,1,0,
        0,0,542,543,1,0,0,0,543,547,5,110,0,0,544,548,3,80,40,0,545,548,
        3,144,72,0,546,548,3,134,67,0,547,544,1,0,0,0,547,545,1,0,0,0,547,
        546,1,0,0,0,548,549,1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,550,
        551,1,0,0,0,551,552,5,119,0,0,552,75,1,0,0,0,553,558,3,72,36,0,554,
        555,5,103,0,0,555,557,3,72,36,0,556,554,1,0,0,0,557,560,1,0,0,0,
        558,556,1,0,0,0,558,559,1,0,0,0,559,77,1,0,0,0,560,558,1,0,0,0,561,
        562,3,12,6,0,562,79,1,0,0,0,563,568,3,82,41,0,564,565,5,103,0,0,
        565,567,3,82,41,0,566,564,1,0,0,0,567,570,1,0,0,0,568,566,1,0,0,
        0,568,569,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,571,573,5,103,
        0,0,572,571,1,0,0,0,572,573,1,0,0,0,573,81,1,0,0,0,574,575,3,84,
        42,0,575,576,5,104,0,0,576,578,3,86,43,0,577,579,3,90,45,0,578,577,
        1,0,0,0,578,579,1,0,0,0,579,83,1,0,0,0,580,581,3,12,6,0,581,85,1,
        0,0,0,582,646,5,17,0,0,583,646,5,18,0,0,584,646,5,19,0,0,585,646,
        5,140,0,0,586,646,5,20,0,0,587,646,5,21,0,0,588,646,5,22,0,0,589,
        646,5,23,0,0,590,646,5,24,0,0,591,646,5,149,0,0,592,646,5,25,0,0,
        593,646,5,157,0,0,594,646,5,26,0,0,595,646,5,27,0,0,596,646,5,144,
        0,0,597,646,5,28,0,0,598,646,3,88,44,0,599,646,5,29,0,0,600,646,
        5,30,0,0,601,646,5,31,0,0,602,646,5,32,0,0,603,646,5,33,0,0,604,
        646,5,34,0,0,605,646,5,35,0,0,606,646,5,180,0,0,607,646,5,36,0,0,
        608,646,5,37,0,0,609,646,5,38,0,0,610,646,5,39,0,0,611,646,5,40,
        0,0,612,646,5,41,0,0,613,646,5,42,0,0,614,646,5,43,0,0,615,646,5,
        44,0,0,616,646,5,45,0,0,617,646,5,46,0,0,618,646,5,47,0,0,619,646,
        5,48,0,0,620,646,5,49,0,0,621,646,5,50,0,0,622,646,5,51,0,0,623,
        646,5,52,0,0,624,646,5,53,0,0,625,646,5,54,0,0,626,646,5,170,0,0,
        627,646,5,55,0,0,628,646,5,56,0,0,629,646,5,57,0,0,630,646,5,58,
        0,0,631,646,5,59,0,0,632,646,5,60,0,0,633,646,5,61,0,0,634,646,1,
        0,0,0,635,646,5,195,0,0,636,646,5,62,0,0,637,646,5,63,0,0,638,646,
        5,64,0,0,639,646,3,114,57,0,640,641,5,65,0,0,641,642,3,14,7,0,642,
        643,5,66,0,0,643,644,3,86,43,0,644,646,1,0,0,0,645,582,1,0,0,0,645,
        583,1,0,0,0,645,584,1,0,0,0,645,585,1,0,0,0,645,586,1,0,0,0,645,
        587,1,0,0,0,645,588,1,0,0,0,645,589,1,0,0,0,645,590,1,0,0,0,645,
        591,1,0,0,0,645,592,1,0,0,0,645,593,1,0,0,0,645,594,1,0,0,0,645,
        595,1,0,0,0,645,596,1,0,0,0,645,597,1,0,0,0,645,598,1,0,0,0,645,
        599,1,0,0,0,645,600,1,0,0,0,645,601,1,0,0,0,645,602,1,0,0,0,645,
        603,1,0,0,0,645,604,1,0,0,0,645,605,1,0,0,0,645,606,1,0,0,0,645,
        607,1,0,0,0,645,608,1,0,0,0,645,609,1,0,0,0,645,610,1,0,0,0,645,
        611,1,0,0,0,645,612,1,0,0,0,645,613,1,0,0,0,645,614,1,0,0,0,645,
        615,1,0,0,0,645,616,1,0,0,0,645,617,1,0,0,0,645,618,1,0,0,0,645,
        619,1,0,0,0,645,620,1,0,0,0,645,621,1,0,0,0,645,622,1,0,0,0,645,
        623,1,0,0,0,645,624,1,0,0,0,645,625,1,0,0,0,645,626,1,0,0,0,645,
        627,1,0,0,0,645,628,1,0,0,0,645,629,1,0,0,0,645,630,1,0,0,0,645,
        631,1,0,0,0,645,632,1,0,0,0,645,633,1,0,0,0,645,634,1,0,0,0,645,
        635,1,0,0,0,645,636,1,0,0,0,645,637,1,0,0,0,645,638,1,0,0,0,645,
        639,1,0,0,0,645,640,1,0,0,0,646,87,1,0,0,0,647,648,5,234,0,0,648,
        649,5,111,0,0,649,650,3,6,3,0,650,651,5,120,0,0,651,89,1,0,0,0,652,
        653,5,112,0,0,653,658,3,92,46,0,654,655,5,103,0,0,655,657,3,92,46,
        0,656,654,1,0,0,0,657,660,1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,
        0,659,662,1,0,0,0,660,658,1,0,0,0,661,663,5,103,0,0,662,661,1,0,
        0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,665,5,121,0,0,665,91,1,0,
        0,0,666,706,3,94,47,0,667,668,5,148,0,0,668,669,5,107,0,0,669,706,
        3,96,48,0,670,675,5,181,0,0,671,672,5,111,0,0,672,673,3,6,3,0,673,
        674,5,120,0,0,674,676,1,0,0,0,675,671,1,0,0,0,675,676,1,0,0,0,676,
        706,1,0,0,0,677,678,5,189,0,0,678,679,5,107,0,0,679,680,5,111,0,
        0,680,681,3,8,4,0,681,682,5,120,0,0,682,706,1,0,0,0,683,706,5,199,
        0,0,684,706,5,188,0,0,685,706,3,2,1,0,686,706,5,213,0,0,687,706,
        5,209,0,0,688,706,3,98,49,0,689,706,3,116,58,0,690,691,5,203,0,0,
        691,692,5,107,0,0,692,706,3,6,3,0,693,694,5,202,0,0,694,695,5,107,
        0,0,695,706,3,6,3,0,696,706,3,128,64,0,697,706,3,132,66,0,698,706,
        3,134,67,0,699,700,5,216,0,0,700,701,5,107,0,0,701,706,3,8,4,0,702,
        703,5,193,0,0,703,704,5,107,0,0,704,706,3,8,4,0,705,666,1,0,0,0,
        705,667,1,0,0,0,705,670,1,0,0,0,705,677,1,0,0,0,705,683,1,0,0,0,
        705,684,1,0,0,0,705,685,1,0,0,0,705,686,1,0,0,0,705,687,1,0,0,0,
        705,688,1,0,0,0,705,689,1,0,0,0,705,690,1,0,0,0,705,693,1,0,0,0,
        705,696,1,0,0,0,705,697,1,0,0,0,705,698,1,0,0,0,705,699,1,0,0,0,
        705,702,1,0,0,0,706,93,1,0,0,0,707,708,7,2,0,0,708,95,1,0,0,0,709,
        719,5,130,0,0,710,719,5,131,0,0,711,719,5,211,0,0,712,719,5,230,
        0,0,713,719,5,231,0,0,714,719,5,67,0,0,715,719,5,68,0,0,716,719,
        5,212,0,0,717,719,3,8,4,0,718,709,1,0,0,0,718,710,1,0,0,0,718,711,
        1,0,0,0,718,712,1,0,0,0,718,713,1,0,0,0,718,714,1,0,0,0,718,715,
        1,0,0,0,718,716,1,0,0,0,718,717,1,0,0,0,719,97,1,0,0,0,720,722,5,
        221,0,0,721,723,3,102,51,0,722,721,1,0,0,0,722,723,1,0,0,0,723,724,
        1,0,0,0,724,725,5,104,0,0,725,729,3,104,52,0,726,727,3,66,33,0,727,
        728,5,106,0,0,728,730,1,0,0,0,729,726,1,0,0,0,729,730,1,0,0,0,730,
        731,1,0,0,0,731,732,3,78,39,0,732,733,5,106,0,0,733,734,3,84,42,
        0,734,99,1,0,0,0,735,737,5,221,0,0,736,738,3,102,51,0,737,736,1,
        0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,740,5,104,0,0,740,741,
        3,78,39,0,741,742,5,106,0,0,742,743,3,84,42,0,743,744,3,104,52,0,
        744,745,3,78,39,0,745,746,5,106,0,0,746,747,3,84,42,0,747,101,1,
        0,0,0,748,749,3,12,6,0,749,103,1,0,0,0,750,755,3,106,53,0,751,755,
        3,108,54,0,752,755,3,110,55,0,753,755,3,112,56,0,754,750,1,0,0,0,
        754,751,1,0,0,0,754,752,1,0,0,0,754,753,1,0,0,0,755,105,1,0,0,0,
        756,757,5,123,0,0,757,107,1,0,0,0,758,759,5,113,0,0,759,109,1,0,
        0,0,760,761,5,108,0,0,761,111,1,0,0,0,762,763,5,115,0,0,763,113,
        1,0,0,0,764,765,3,12,6,0,765,115,1,0,0,0,766,767,5,152,0,0,767,768,
        5,107,0,0,768,769,5,110,0,0,769,770,3,120,60,0,770,771,5,119,0,0,
        771,117,1,0,0,0,772,773,5,152,0,0,773,774,3,114,57,0,774,775,5,107,
        0,0,775,776,5,110,0,0,776,777,3,120,60,0,777,778,5,119,0,0,778,119,
        1,0,0,0,779,784,3,122,61,0,780,781,5,103,0,0,781,783,3,122,61,0,
        782,780,1,0,0,0,783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,
        785,788,1,0,0,0,786,784,1,0,0,0,787,789,5,103,0,0,788,787,1,0,0,
        0,788,789,1,0,0,0,789,121,1,0,0,0,790,791,3,124,62,0,791,792,5,107,
        0,0,792,794,1,0,0,0,793,790,1,0,0,0,793,794,1,0,0,0,794,795,1,0,
        0,0,795,800,3,126,63,0,796,797,5,112,0,0,797,798,3,134,67,0,798,
        799,5,121,0,0,799,801,1,0,0,0,800,796,1,0,0,0,800,801,1,0,0,0,801,
        123,1,0,0,0,802,803,3,6,3,0,803,125,1,0,0,0,804,805,3,8,4,0,805,
        127,1,0,0,0,806,807,5,183,0,0,807,808,5,111,0,0,808,809,3,130,65,
        0,809,810,5,120,0,0,810,129,1,0,0,0,811,812,3,8,4,0,812,131,1,0,
        0,0,813,814,5,194,0,0,814,815,5,107,0,0,815,816,5,110,0,0,816,817,
        3,22,11,0,817,818,5,119,0,0,818,133,1,0,0,0,819,820,5,210,0,0,820,
        821,5,104,0,0,821,822,3,136,68,0,822,135,1,0,0,0,823,824,3,8,4,0,
        824,137,1,0,0,0,825,826,5,187,0,0,826,827,3,140,70,0,827,830,5,110,
        0,0,828,831,3,78,39,0,829,831,3,140,70,0,830,828,1,0,0,0,830,829,
        1,0,0,0,831,832,1,0,0,0,832,833,5,106,0,0,833,834,3,84,42,0,834,
        835,1,0,0,0,835,838,5,107,0,0,836,839,3,78,39,0,837,839,3,140,70,
        0,838,836,1,0,0,0,838,837,1,0,0,0,839,840,1,0,0,0,840,841,5,106,
        0,0,841,842,3,84,42,0,842,843,1,0,0,0,843,844,5,119,0,0,844,139,
        1,0,0,0,845,846,3,12,6,0,846,141,1,0,0,0,847,849,5,69,0,0,848,850,
        3,152,76,0,849,848,1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,852,
        5,70,0,0,852,853,3,78,39,0,853,854,5,112,0,0,854,855,3,150,75,0,
        855,858,5,121,0,0,856,857,5,71,0,0,857,859,7,3,0,0,858,856,1,0,0,
        0,858,859,1,0,0,0,859,143,1,0,0,0,860,861,5,76,0,0,861,862,5,107,
        0,0,862,863,5,110,0,0,863,864,3,146,73,0,864,865,5,119,0,0,865,145,
        1,0,0,0,866,871,3,148,74,0,867,868,5,103,0,0,868,870,3,148,74,0,
        869,867,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,
        872,147,1,0,0,0,873,871,1,0,0,0,874,875,3,152,76,0,875,876,5,107,
        0,0,876,878,1,0,0,0,877,874,1,0,0,0,877,878,1,0,0,0,878,879,1,0,
        0,0,879,880,5,112,0,0,880,881,3,150,75,0,881,884,5,121,0,0,882,883,
        5,71,0,0,883,885,7,3,0,0,884,882,1,0,0,0,884,885,1,0,0,0,885,149,
        1,0,0,0,886,891,3,84,42,0,887,888,5,103,0,0,888,890,3,84,42,0,889,
        887,1,0,0,0,890,893,1,0,0,0,891,889,1,0,0,0,891,892,1,0,0,0,892,
        895,1,0,0,0,893,891,1,0,0,0,894,896,5,103,0,0,895,894,1,0,0,0,895,
        896,1,0,0,0,896,151,1,0,0,0,897,898,3,12,6,0,898,153,1,0,0,0,899,
        900,5,186,0,0,900,901,3,156,78,0,901,902,5,110,0,0,902,903,3,158,
        79,0,903,904,5,119,0,0,904,155,1,0,0,0,905,906,3,12,6,0,906,157,
        1,0,0,0,907,908,3,8,4,0,908,159,1,0,0,0,909,910,3,162,81,0,910,911,
        5,104,0,0,911,912,3,162,81,0,912,913,5,104,0,0,913,914,3,162,81,
        0,914,915,5,104,0,0,915,916,3,162,81,0,916,917,5,104,0,0,917,918,
        3,162,81,0,918,161,1,0,0,0,919,923,3,6,3,0,920,923,3,164,82,0,921,
        923,3,166,83,0,922,919,1,0,0,0,922,920,1,0,0,0,922,921,1,0,0,0,923,
        163,1,0,0,0,924,925,3,6,3,0,925,926,5,123,0,0,926,927,3,6,3,0,927,
        165,1,0,0,0,928,929,3,14,7,0,929,167,1,0,0,0,930,931,5,224,0,0,931,
        932,3,176,88,0,932,933,5,107,0,0,933,934,5,110,0,0,934,935,3,170,
        85,0,935,936,5,119,0,0,936,169,1,0,0,0,937,938,3,172,86,0,938,939,
        3,180,90,0,939,171,1,0,0,0,940,941,3,174,87,0,941,942,5,104,0,0,
        942,959,1,0,0,0,943,944,5,77,0,0,944,945,5,111,0,0,945,946,3,160,
        80,0,946,947,5,120,0,0,947,959,1,0,0,0,948,949,5,78,0,0,949,950,
        5,111,0,0,950,951,3,160,80,0,951,952,5,120,0,0,952,959,1,0,0,0,953,
        954,5,70,0,0,954,955,5,111,0,0,955,956,3,178,89,0,956,957,5,120,
        0,0,957,959,1,0,0,0,958,940,1,0,0,0,958,943,1,0,0,0,958,948,1,0,
        0,0,958,953,1,0,0,0,959,173,1,0,0,0,960,961,5,160,0,0,961,962,5,
        111,0,0,962,963,3,188,94,0,963,964,5,120,0,0,964,175,1,0,0,0,965,
        966,3,12,6,0,966,177,1,0,0,0,967,968,3,8,4,0,968,179,1,0,0,0,969,
        970,5,79,0,0,970,971,3,182,91,0,971,181,1,0,0,0,972,979,3,184,92,
        0,973,974,5,111,0,0,974,975,3,186,93,0,975,976,5,120,0,0,976,980,
        1,0,0,0,977,978,5,111,0,0,978,980,5,120,0,0,979,973,1,0,0,0,979,
        977,1,0,0,0,979,980,1,0,0,0,980,983,1,0,0,0,981,983,3,224,112,0,
        982,972,1,0,0,0,982,981,1,0,0,0,983,183,1,0,0,0,984,985,3,10,5,0,
        985,185,1,0,0,0,986,987,3,18,9,0,987,187,1,0,0,0,988,989,6,94,-1,
        0,989,1085,3,10,5,0,990,991,3,10,5,0,991,992,5,111,0,0,992,993,5,
        120,0,0,993,1085,1,0,0,0,994,1085,3,192,96,0,995,1085,3,198,99,0,
        996,997,5,111,0,0,997,998,3,188,94,0,998,999,5,120,0,0,999,1085,
        1,0,0,0,1000,1001,5,123,0,0,1001,1085,3,188,94,18,1002,1003,5,164,
        0,0,1003,1085,3,188,94,17,1004,1005,5,80,0,0,1005,1006,5,111,0,0,
        1006,1007,3,188,94,0,1007,1008,5,120,0,0,1008,1085,1,0,0,0,1009,
        1010,5,81,0,0,1010,1011,5,111,0,0,1011,1012,3,188,94,0,1012,1013,
        5,120,0,0,1013,1085,1,0,0,0,1014,1015,5,82,0,0,1015,1016,5,111,0,
        0,1016,1017,3,188,94,0,1017,1018,5,120,0,0,1018,1085,1,0,0,0,1019,
        1020,5,83,0,0,1020,1021,5,111,0,0,1021,1022,3,188,94,0,1022,1023,
        5,120,0,0,1023,1085,1,0,0,0,1024,1025,5,84,0,0,1025,1026,5,111,0,
        0,1026,1027,3,188,94,0,1027,1028,5,120,0,0,1028,1085,1,0,0,0,1029,
        1030,5,85,0,0,1030,1031,5,111,0,0,1031,1032,3,188,94,0,1032,1033,
        5,120,0,0,1033,1085,1,0,0,0,1034,1035,5,86,0,0,1035,1036,5,111,0,
        0,1036,1037,3,188,94,0,1037,1038,5,120,0,0,1038,1085,1,0,0,0,1039,
        1040,5,87,0,0,1040,1041,5,111,0,0,1041,1042,3,188,94,0,1042,1043,
        5,120,0,0,1043,1085,1,0,0,0,1044,1045,5,88,0,0,1045,1046,5,111,0,
        0,1046,1047,3,188,94,0,1047,1048,5,120,0,0,1048,1085,1,0,0,0,1049,
        1050,5,89,0,0,1050,1051,5,111,0,0,1051,1052,3,188,94,0,1052,1053,
        5,120,0,0,1053,1085,1,0,0,0,1054,1055,5,90,0,0,1055,1056,5,111,0,
        0,1056,1057,3,188,94,0,1057,1058,5,120,0,0,1058,1085,1,0,0,0,1059,
        1060,5,91,0,0,1060,1061,5,111,0,0,1061,1062,3,188,94,0,1062,1063,
        5,120,0,0,1063,1085,1,0,0,0,1064,1065,5,92,0,0,1065,1066,5,111,0,
        0,1066,1067,3,190,95,0,1067,1068,5,120,0,0,1068,1085,1,0,0,0,1069,
        1070,5,203,0,0,1070,1071,5,111,0,0,1071,1072,3,190,95,0,1072,1073,
        5,120,0,0,1073,1085,1,0,0,0,1074,1075,5,202,0,0,1075,1076,5,111,
        0,0,1076,1077,3,190,95,0,1077,1078,5,120,0,0,1078,1085,1,0,0,0,1079,
        1080,5,93,0,0,1080,1081,5,111,0,0,1081,1082,3,190,95,0,1082,1083,
        5,120,0,0,1083,1085,1,0,0,0,1084,988,1,0,0,0,1084,990,1,0,0,0,1084,
        994,1,0,0,0,1084,995,1,0,0,0,1084,996,1,0,0,0,1084,1000,1,0,0,0,
        1084,1002,1,0,0,0,1084,1004,1,0,0,0,1084,1009,1,0,0,0,1084,1014,
        1,0,0,0,1084,1019,1,0,0,0,1084,1024,1,0,0,0,1084,1029,1,0,0,0,1084,
        1034,1,0,0,0,1084,1039,1,0,0,0,1084,1044,1,0,0,0,1084,1049,1,0,0,
        0,1084,1054,1,0,0,0,1084,1059,1,0,0,0,1084,1064,1,0,0,0,1084,1069,
        1,0,0,0,1084,1074,1,0,0,0,1084,1079,1,0,0,0,1085,1102,1,0,0,0,1086,
        1087,10,22,0,0,1087,1088,7,4,0,0,1088,1101,3,188,94,23,1089,1090,
        10,21,0,0,1090,1091,7,5,0,0,1091,1101,3,188,94,22,1092,1093,10,20,
        0,0,1093,1094,3,194,97,0,1094,1095,3,188,94,21,1095,1101,1,0,0,0,
        1096,1097,10,19,0,0,1097,1098,3,196,98,0,1098,1099,3,188,94,20,1099,
        1101,1,0,0,0,1100,1086,1,0,0,0,1100,1089,1,0,0,0,1100,1092,1,0,0,
        0,1100,1096,1,0,0,0,1101,1104,1,0,0,0,1102,1100,1,0,0,0,1102,1103,
        1,0,0,0,1103,189,1,0,0,0,1104,1102,1,0,0,0,1105,1110,3,188,94,0,
        1106,1107,5,103,0,0,1107,1109,3,188,94,0,1108,1106,1,0,0,0,1109,
        1112,1,0,0,0,1110,1108,1,0,0,0,1110,1111,1,0,0,0,1111,1114,1,0,0,
        0,1112,1110,1,0,0,0,1113,1115,5,103,0,0,1114,1113,1,0,0,0,1114,1115,
        1,0,0,0,1115,191,1,0,0,0,1116,1121,3,6,3,0,1117,1121,5,157,0,0,1118,
        1121,3,8,4,0,1119,1121,5,131,0,0,1120,1116,1,0,0,0,1120,1117,1,0,
        0,0,1120,1118,1,0,0,0,1120,1119,1,0,0,0,1121,193,1,0,0,0,1122,1123,
        7,6,0,0,1123,195,1,0,0,0,1124,1125,7,7,0,0,1125,197,1,0,0,0,1126,
        1127,5,94,0,0,1127,1133,3,200,100,0,1128,1130,5,111,0,0,1129,1131,
        3,202,101,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,1132,1,0,0,
        0,1132,1134,5,120,0,0,1133,1128,1,0,0,0,1133,1134,1,0,0,0,1134,199,
        1,0,0,0,1135,1136,3,12,6,0,1136,201,1,0,0,0,1137,1140,3,18,9,0,1138,
        1140,3,16,8,0,1139,1137,1,0,0,0,1139,1138,1,0,0,0,1140,1141,1,0,
        0,0,1141,1139,1,0,0,0,1141,1142,1,0,0,0,1142,203,1,0,0,0,1143,1144,
        5,95,0,0,1144,1145,3,206,103,0,1145,1146,5,70,0,0,1146,1147,3,78,
        39,0,1147,1148,3,208,104,0,1148,1150,5,110,0,0,1149,1151,3,210,105,
        0,1150,1149,1,0,0,0,1151,1152,1,0,0,0,1152,1150,1,0,0,0,1152,1153,
        1,0,0,0,1153,1154,1,0,0,0,1154,1155,5,119,0,0,1155,205,1,0,0,0,1156,
        1157,3,12,6,0,1157,207,1,0,0,0,1158,1159,5,245,0,0,1159,209,1,0,
        0,0,1160,1161,3,212,106,0,1161,211,1,0,0,0,1162,1167,3,214,107,0,
        1163,1164,5,122,0,0,1164,1166,3,214,107,0,1165,1163,1,0,0,0,1166,
        1169,1,0,0,0,1167,1165,1,0,0,0,1167,1168,1,0,0,0,1168,1171,1,0,0,
        0,1169,1167,1,0,0,0,1170,1172,5,122,0,0,1171,1170,1,0,0,0,1171,1172,
        1,0,0,0,1172,213,1,0,0,0,1173,1176,5,245,0,0,1174,1177,3,78,39,0,
        1175,1177,3,140,70,0,1176,1174,1,0,0,0,1176,1175,1,0,0,0,1177,1190,
        1,0,0,0,1178,1179,5,96,0,0,1179,1184,3,216,108,0,1180,1181,5,103,
        0,0,1181,1183,3,216,108,0,1182,1180,1,0,0,0,1183,1186,1,0,0,0,1184,
        1182,1,0,0,0,1184,1185,1,0,0,0,1185,1187,1,0,0,0,1186,1184,1,0,0,
        0,1187,1188,5,238,0,0,1188,1189,3,188,94,0,1189,1191,1,0,0,0,1190,
        1178,1,0,0,0,1190,1191,1,0,0,0,1191,215,1,0,0,0,1192,1193,3,84,42,
        0,1193,1194,5,107,0,0,1194,1195,3,188,94,0,1195,217,1,0,0,0,1196,
        1197,5,97,0,0,1197,1199,3,220,110,0,1198,1200,3,224,112,0,1199,1198,
        1,0,0,0,1199,1200,1,0,0,0,1200,1201,1,0,0,0,1201,1202,5,107,0,0,
        1202,1203,5,110,0,0,1203,1204,3,222,111,0,1204,1205,5,119,0,0,1205,
        219,1,0,0,0,1206,1211,5,240,0,0,1207,1211,5,242,0,0,1208,1211,5,
        241,0,0,1209,1211,3,8,4,0,1210,1206,1,0,0,0,1210,1207,1,0,0,0,1210,
        1208,1,0,0,0,1210,1209,1,0,0,0,1211,221,1,0,0,0,1212,1213,3,18,9,
        0,1213,223,1,0,0,0,1214,1215,3,8,4,0,1215,225,1,0,0,0,1216,1217,
        5,98,0,0,1217,1218,3,228,114,0,1218,1220,5,110,0,0,1219,1221,3,230,
        115,0,1220,1219,1,0,0,0,1221,1222,1,0,0,0,1222,1220,1,0,0,0,1222,
        1223,1,0,0,0,1223,1224,1,0,0,0,1224,1225,5,119,0,0,1225,227,1,0,
        0,0,1226,1227,3,12,6,0,1227,229,1,0,0,0,1228,1229,5,99,0,0,1229,
        1230,3,232,116,0,1230,1231,5,79,0,0,1231,1233,5,110,0,0,1232,1234,
        3,234,117,0,1233,1232,1,0,0,0,1234,1235,1,0,0,0,1235,1233,1,0,0,
        0,1235,1236,1,0,0,0,1236,1237,1,0,0,0,1237,1238,5,119,0,0,1238,231,
        1,0,0,0,1239,1240,3,12,6,0,1240,233,1,0,0,0,1241,1250,3,212,106,
        0,1242,1243,5,100,0,0,1243,1244,5,111,0,0,1244,1245,3,8,4,0,1245,
        1246,5,120,0,0,1246,1250,1,0,0,0,1247,1250,3,188,94,0,1248,1250,
        3,180,90,0,1249,1241,1,0,0,0,1249,1242,1,0,0,0,1249,1247,1,0,0,0,
        1249,1248,1,0,0,0,1250,235,1,0,0,0,95,237,240,245,258,269,273,280,
        284,291,295,314,321,325,331,335,337,352,356,365,367,371,374,377,
        380,383,386,389,392,395,397,409,449,462,464,467,483,485,498,506,
        525,541,547,549,558,568,572,578,645,658,662,675,705,718,722,729,
        737,754,784,788,793,800,830,838,849,858,871,877,884,891,895,922,
        958,979,982,1084,1100,1102,1110,1114,1120,1130,1133,1139,1141,1152,
        1167,1171,1176,1184,1190,1199,1210,1222,1235,1249
    ]

class apgParser ( Parser ):

    grammarFileName = "apg.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'project_name'", "'cloud_cfg'", "'csp'", 
                     "'AWS'", "'Azure'", "'Linode'", "'auth'", "'third_party_cfg'", 
                     "'perf'", "'version_mgmt'", "'plugins'", "'database'", 
                     "'dburl'", "'backup-frequency'", "'contains-tables'", 
                     "'excludes-tables'", "'bit'", "'bitlist'", "'boolean'", 
                     "'tinyint'", "'smallint'", "'int'", "'integer'", "'bigint'", 
                     "'decimal'", "'money'", "'smallmoney'", "'nchar'", 
                     "'nvarchar'", "'string'", "'text'", "'mediumtext'", 
                     "'longtext'", "'xml'", "'document'", "'mediumblob'", 
                     "'longblob'", "'binary'", "'varbinary'", "'json'", 
                     "'jsonb'", "'interval'", "'time'", "'timestamp'", "'timestamptz'", 
                     "'timestampltz'", "'datetime'", "'date'", "'geography'", 
                     "'geometry'", "'point'", "'hllsketch'", "'hstore'", 
                     "'pseudo_type'", "'serial'", "'smallserial'", "'bigserial'", 
                     "'uniqueidentifier'", "'rowversion'", "'variant'", 
                     "'inet'", "'image'", "'object'", "'uuid'", "'array'", 
                     "'of'", "'CURRENT_DATE'", "'CURRENT_USER'", "'index'", 
                     "'on'", "'of type'", "'btree'", "'gin'", "'gist'", 
                     "'hash'", "'indexes'", "'at'", "'every'", "'do'", "'sin'", 
                     "'cos'", "'tan'", "'asin'", "'acos'", "'atan'", "'sinh'", 
                     "'cosh'", "'tanh'", "'asinh'", "'acosh'", "'atanh'", 
                     "'avg'", "'sum'", "'exec'", "'trigger'", "'set'", "'script'", 
                     "'workflow'", "'step'", "'log'", "'+'", "'&&'", "','", 
                     "':'", "'/'", "'.'", "'='", "'>'", "'>='", "'{'", "'('", 
                     "'['", "'<'", "'<='", "<INVALID>", "'*'", "'!='", "'||'", 
                     "'}'", "')'", "']'", "';'", "'-'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'abstract'", 
                     "'async'", "'await'", "'bool'", "'break'", "'case'", 
                     "'catch'", "'char'", "'class'", "'const'", "'continue'", 
                     "'default'", "'double'", "'dynamic'", "'else'", "'enum'", 
                     "'extends'", "'false'", "'final'", "'finally'", "'float'", 
                     "'for'", "'global'", "'if'", "'implements'", "'interface'", 
                     "'new'", "'not'", "'package'", "'private'", "'restrict'", 
                     "'return'", "'static'", "'super'", "'switch'", "'this'", 
                     "'throw'", "'true'", "'try'", "'void'", "'while'", 
                     "'xor'", "'android'", "'blob'", "'cache'", "'chart'", 
                     "'check'", "'config'", "'couchdb'", "'dbfunc'", "'dbview'", 
                     "<INVALID>", "'default-expression'", "'deployment'", 
                     "'desktop'", "'dialect'", "'label'", "'layout'", "'file'", 
                     "'generate'", "'#import'", "'#include'", "<INVALID>", 
                     "'ios'", "'languages'", "'max'", "'min'", "'mixin'", 
                     "'mode'", "'mongodb'", "'mssql'", "'mysql'", "<INVALID>", 
                     "'note'", "'now'", "<INVALID>", "'nullable'", "'oracle'", 
                     "'os'", "'placeholder'", "'pgsql'", "'primary_key'", 
                     "'pk'", "'project'", "'ref'", "'report'", "'required'", 
                     "'rule'", "'sql'", "'sqlite'", "'table'", "'tablegroup'", 
                     "'theme'", "'today'", "'tomorrow'", "<INVALID>", "<INVALID>", 
                     "'varchar'", "'version'", "'view'", "'web'", "'where'", 
                     "'yesterday'", "'zsh'", "'csh'", "'bash'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "ADD", "AND", "COMMA", "COLON", "DIV", 
                      "DOT", "EQ", "GT", "GTE", "L_CURLY", "L_PAR", "L_SQUARE", 
                      "LT", "LTE", "M2M", "MUL", "NEQ", "OR", "R_CURLY", 
                      "R_PAR", "R_SQUARE", "SEMI_COLON", "SUB", "C_LINE_COMMENT", 
                      "C_STYLE_COMMENT", "NL", "WS", "String", "Int", "Number", 
                      "Bool", "HEX", "DECIMAL", "TIME_INTERVAL", "DATE_TIME_LITERAL", 
                      "VersionLiteral", "ABSTRACT", "ASYNC", "AWAIT", "BOOL", 
                      "BREAK", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                      "CONTINUE", "DEFAULT", "DOUBLE", "DYNAMIC", "ELSE", 
                      "ENUM", "EXTENDS", "FALSE", "FINAL", "FINALLY", "FLOAT", 
                      "FOR", "GLOBAL", "IF", "IMPLEMENTS", "INTERFACE", 
                      "NEW", "NOT", "PACKAGE", "PRIVATE", "RESTRICT", "RETURN", 
                      "STATIC", "SUPER", "SWITCH", "THIS", "THROW", "TRUE", 
                      "TRY", "VOID", "WHILE", "XOR", "ANDROID", "BLOB", 
                      "CACHE", "CHART", "CHECK", "CONFIG", "COUCHDB", "DBFUNC", 
                      "DBVIEW", "DECR", "DEFAULT_EXPR", "DEPLOYMENT", "DESKTOP", 
                      "DIALECT", "LABEL", "LAYOUT", "FILE", "GENERATE", 
                      "IMPORT", "INCLUDE", "INCR", "IOS", "LANGUAGES", "MAX", 
                      "MIN", "MIXIN", "MODE", "MONGODB", "MSSQL", "MYSQL", 
                      "NOT_NULL", "NOTE", "NOW", "NULL", "NULLABLE", "ORACLE", 
                      "OS", "PLACEHOLDER", "PGSQL", "PK_LONG", "PK_SHORT", 
                      "PROJECT", "REF", "REPORT", "REQUIRED", "RULE", "SQL", 
                      "SQLITE", "TABLE", "TBLGROUP", "THEME", "TODAY", "TOMORROW", 
                      "TSERIES", "UNIQ", "VARCHAR", "VERSION", "VIEW", "WEB", 
                      "WHERE", "YESTERDAY", "ZSH", "CSH", "BASH", "Ident", 
                      "SP", "DML_ACTION" ]

    RULE_apg = 0
    RULE_unique = 1
    RULE_db = 2
    RULE_int = 3
    RULE_string = 4
    RULE_ident = 5
    RULE_name_attr = 6
    RULE_int_list = 7
    RULE_ident_list = 8
    RULE_string_list = 9
    RULE_option = 10
    RULE_option_list = 11
    RULE_importDeclaration = 12
    RULE_import_file_list = 13
    RULE_projectBlock = 14
    RULE_projectName = 15
    RULE_project_property_list = 16
    RULE_project_property = 17
    RULE_cloudCfg = 18
    RULE_cloud_option_list = 19
    RULE_authCfg = 20
    RULE_thirdPartyCfg = 21
    RULE_perfCfg = 22
    RULE_versionCfg = 23
    RULE_pluginCfg = 24
    RULE_genOptions = 25
    RULE_appGenTarget = 26
    RULE_language = 27
    RULE_lang_list = 28
    RULE_theme = 29
    RULE_statement = 30
    RULE_object = 31
    RULE_database = 32
    RULE_dbname = 33
    RULE_database_options = 34
    RULE_mixin = 35
    RULE_mixin_name = 36
    RULE_table = 37
    RULE_mixin_list = 38
    RULE_table_name = 39
    RULE_column_list = 40
    RULE_column = 41
    RULE_column_name = 42
    RULE_data_type = 43
    RULE_varchar = 44
    RULE_column_option_list = 45
    RULE_column_option = 46
    RULE_primary_key = 47
    RULE_column_default = 48
    RULE_ref_internal = 49
    RULE_ref_ext = 50
    RULE_ref_name = 51
    RULE_ref_type = 52
    RULE_oneToOne = 53
    RULE_oneToMany = 54
    RULE_manyToOne = 55
    RULE_manyToMany = 56
    RULE_enum_name = 57
    RULE_enum_internal = 58
    RULE_enum_ext = 59
    RULE_enum_list = 60
    RULE_enum_item = 61
    RULE_enum_idx = 62
    RULE_enum_value = 63
    RULE_check = 64
    RULE_check_expr = 65
    RULE_layout = 66
    RULE_note_option = 67
    RULE_note_value = 68
    RULE_dbview = 69
    RULE_view_name = 70
    RULE_index_ext = 71
    RULE_index_int = 72
    RULE_index_item_list = 73
    RULE_index_item = 74
    RULE_column_names = 75
    RULE_index_name = 76
    RULE_dbfunc = 77
    RULE_func_name = 78
    RULE_func_body = 79
    RULE_schedule = 80
    RULE_field = 81
    RULE_sched_range = 82
    RULE_sched_list = 83
    RULE_business_rule = 84
    RULE_businessRule = 85
    RULE_condition = 86
    RULE_ifExpr = 87
    RULE_rule_name = 88
    RULE_event_desc = 89
    RULE_actionExpr = 90
    RULE_action_value = 91
    RULE_action_verb = 92
    RULE_action_object = 93
    RULE_expr = 94
    RULE_expr_list = 95
    RULE_literal = 96
    RULE_booleanOp = 97
    RULE_comparisonOp = 98
    RULE_functionCall = 99
    RULE_function_name = 100
    RULE_param_list = 101
    RULE_trigger = 102
    RULE_trigger_name = 103
    RULE_trigger_event = 104
    RULE_trigger_statement = 105
    RULE_sql_stmt_list = 106
    RULE_sql_stmt = 107
    RULE_column_assignment = 108
    RULE_script = 109
    RULE_script_lang = 110
    RULE_script_body = 111
    RULE_script_name = 112
    RULE_workflow = 113
    RULE_workflow_name = 114
    RULE_workflow_step = 115
    RULE_step_name = 116
    RULE_workflow_statement = 117

    ruleNames =  [ "apg", "unique", "db", "int", "string", "ident", "name_attr", 
                   "int_list", "ident_list", "string_list", "option", "option_list", 
                   "importDeclaration", "import_file_list", "projectBlock", 
                   "projectName", "project_property_list", "project_property", 
                   "cloudCfg", "cloud_option_list", "authCfg", "thirdPartyCfg", 
                   "perfCfg", "versionCfg", "pluginCfg", "genOptions", "appGenTarget", 
                   "language", "lang_list", "theme", "statement", "object", 
                   "database", "dbname", "database_options", "mixin", "mixin_name", 
                   "table", "mixin_list", "table_name", "column_list", "column", 
                   "column_name", "data_type", "varchar", "column_option_list", 
                   "column_option", "primary_key", "column_default", "ref_internal", 
                   "ref_ext", "ref_name", "ref_type", "oneToOne", "oneToMany", 
                   "manyToOne", "manyToMany", "enum_name", "enum_internal", 
                   "enum_ext", "enum_list", "enum_item", "enum_idx", "enum_value", 
                   "check", "check_expr", "layout", "note_option", "note_value", 
                   "dbview", "view_name", "index_ext", "index_int", "index_item_list", 
                   "index_item", "column_names", "index_name", "dbfunc", 
                   "func_name", "func_body", "schedule", "field", "sched_range", 
                   "sched_list", "business_rule", "businessRule", "condition", 
                   "ifExpr", "rule_name", "event_desc", "actionExpr", "action_value", 
                   "action_verb", "action_object", "expr", "expr_list", 
                   "literal", "booleanOp", "comparisonOp", "functionCall", 
                   "function_name", "param_list", "trigger", "trigger_name", 
                   "trigger_event", "trigger_statement", "sql_stmt_list", 
                   "sql_stmt", "column_assignment", "script", "script_lang", 
                   "script_body", "script_name", "workflow", "workflow_name", 
                   "workflow_step", "step_name", "workflow_statement" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    ADD=101
    AND=102
    COMMA=103
    COLON=104
    DIV=105
    DOT=106
    EQ=107
    GT=108
    GTE=109
    L_CURLY=110
    L_PAR=111
    L_SQUARE=112
    LT=113
    LTE=114
    M2M=115
    MUL=116
    NEQ=117
    OR=118
    R_CURLY=119
    R_PAR=120
    R_SQUARE=121
    SEMI_COLON=122
    SUB=123
    C_LINE_COMMENT=124
    C_STYLE_COMMENT=125
    NL=126
    WS=127
    String=128
    Int=129
    Number=130
    Bool=131
    HEX=132
    DECIMAL=133
    TIME_INTERVAL=134
    DATE_TIME_LITERAL=135
    VersionLiteral=136
    ABSTRACT=137
    ASYNC=138
    AWAIT=139
    BOOL=140
    BREAK=141
    CASE=142
    CATCH=143
    CHAR=144
    CLASS=145
    CONST=146
    CONTINUE=147
    DEFAULT=148
    DOUBLE=149
    DYNAMIC=150
    ELSE=151
    ENUM=152
    EXTENDS=153
    FALSE=154
    FINAL=155
    FINALLY=156
    FLOAT=157
    FOR=158
    GLOBAL=159
    IF=160
    IMPLEMENTS=161
    INTERFACE=162
    NEW=163
    NOT=164
    PACKAGE=165
    PRIVATE=166
    RESTRICT=167
    RETURN=168
    STATIC=169
    SUPER=170
    SWITCH=171
    THIS=172
    THROW=173
    TRUE=174
    TRY=175
    VOID=176
    WHILE=177
    XOR=178
    ANDROID=179
    BLOB=180
    CACHE=181
    CHART=182
    CHECK=183
    CONFIG=184
    COUCHDB=185
    DBFUNC=186
    DBVIEW=187
    DECR=188
    DEFAULT_EXPR=189
    DEPLOYMENT=190
    DESKTOP=191
    DIALECT=192
    LABEL=193
    LAYOUT=194
    FILE=195
    GENERATE=196
    IMPORT=197
    INCLUDE=198
    INCR=199
    IOS=200
    LANGUAGES=201
    MAX=202
    MIN=203
    MIXIN=204
    MODE=205
    MONGODB=206
    MSSQL=207
    MYSQL=208
    NOT_NULL=209
    NOTE=210
    NOW=211
    NULL=212
    NULLABLE=213
    ORACLE=214
    OS=215
    PLACEHOLDER=216
    PGSQL=217
    PK_LONG=218
    PK_SHORT=219
    PROJECT=220
    REF=221
    REPORT=222
    REQUIRED=223
    RULE=224
    SQL=225
    SQLITE=226
    TABLE=227
    TBLGROUP=228
    THEME=229
    TODAY=230
    TOMORROW=231
    TSERIES=232
    UNIQ=233
    VARCHAR=234
    VERSION=235
    VIEW=236
    WEB=237
    WHERE=238
    YESTERDAY=239
    ZSH=240
    CSH=241
    BASH=242
    Ident=243
    SP=244
    DML_ACTION=245

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ApgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(apgParser.EOF, 0)

        def importDeclaration(self):
            return self.getTypedRuleContext(apgParser.ImportDeclarationContext,0)


        def projectBlock(self):
            return self.getTypedRuleContext(apgParser.ProjectBlockContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.StatementContext)
            else:
                return self.getTypedRuleContext(apgParser.StatementContext,i)


        def getRuleIndex(self):
            return apgParser.RULE_apg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApg" ):
                listener.enterApg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApg" ):
                listener.exitApg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApg" ):
                return visitor.visitApg(self)
            else:
                return visitor.visitChildren(self)




    def apg(self):

        localctx = apgParser.ApgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_apg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==197 or _la==198:
                self.state = 236
                self.importDeclaration()


            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 239
                self.projectBlock()


            self.state = 243 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 242
                self.statement()
                self.state = 245 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==12 or _la==69 or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 144115188075855885) != 0) or ((((_la - 186)) & ~0x3f) == 0 and ((1 << (_la - 186)) & 2508261163011) != 0)):
                    break

            self.state = 247
            self.match(apgParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNIQ(self):
            return self.getToken(apgParser.UNIQ, 0)

        def getRuleIndex(self):
            return apgParser.RULE_unique

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnique" ):
                listener.enterUnique(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnique" ):
                listener.exitUnique(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnique" ):
                return visitor.visitUnique(self)
            else:
                return visitor.visitChildren(self)




    def unique(self):

        localctx = apgParser.UniqueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_unique)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(apgParser.UNIQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PGSQL(self):
            return self.getToken(apgParser.PGSQL, 0)

        def MYSQL(self):
            return self.getToken(apgParser.MYSQL, 0)

        def SQLITE(self):
            return self.getToken(apgParser.SQLITE, 0)

        def ORACLE(self):
            return self.getToken(apgParser.ORACLE, 0)

        def MSSQL(self):
            return self.getToken(apgParser.MSSQL, 0)

        def MONGODB(self):
            return self.getToken(apgParser.MONGODB, 0)

        def COUCHDB(self):
            return self.getToken(apgParser.COUCHDB, 0)

        def getRuleIndex(self):
            return apgParser.RULE_db

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb" ):
                listener.enterDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb" ):
                listener.exitDb(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb" ):
                return visitor.visitDb(self)
            else:
                return visitor.visitChildren(self)




    def db(self):

        localctx = apgParser.DbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_db)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            _la = self._input.LA(1)
            if not(((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & 2203869773825) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(apgParser.Int, 0)

        def getRuleIndex(self):
            return apgParser.RULE_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt" ):
                listener.enterInt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt" ):
                listener.exitInt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInt" ):
                return visitor.visitInt(self)
            else:
                return visitor.visitChildren(self)




    def int_(self):

        localctx = apgParser.IntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_int)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.match(apgParser.Int)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def String(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.String)
            else:
                return self.getToken(apgParser.String, i)

        def getRuleIndex(self):
            return apgParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = apgParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_string)
        try:
            self.state = 258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 255
                self.match(apgParser.String)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 256
                self.match(apgParser.String)
                self.state = 257
                self.match(apgParser.String)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(apgParser.Ident, 0)

        def getRuleIndex(self):
            return apgParser.RULE_ident

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdent" ):
                listener.enterIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdent" ):
                listener.exitIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdent" ):
                return visitor.visitIdent(self)
            else:
                return visitor.visitChildren(self)




    def ident(self):

        localctx = apgParser.IdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_ident)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.match(apgParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(apgParser.IdentContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_name_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_attr" ):
                listener.enterName_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_attr" ):
                listener.exitName_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_attr" ):
                return visitor.visitName_attr(self)
            else:
                return visitor.visitChildren(self)




    def name_attr(self):

        localctx = apgParser.Name_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_name_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.ident()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Int_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.IntContext)
            else:
                return self.getTypedRuleContext(apgParser.IntContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_int_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt_list" ):
                listener.enterInt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt_list" ):
                listener.exitInt_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInt_list" ):
                return visitor.visitInt_list(self)
            else:
                return visitor.visitChildren(self)




    def int_list(self):

        localctx = apgParser.Int_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_int_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.int_()
            self.state = 269
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 265
                    self.match(apgParser.COMMA)
                    self.state = 266
                    self.int_() 
                self.state = 271
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 272
                self.match(apgParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ident_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.IdentContext)
            else:
                return self.getTypedRuleContext(apgParser.IdentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_ident_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdent_list" ):
                listener.enterIdent_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdent_list" ):
                listener.exitIdent_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdent_list" ):
                return visitor.visitIdent_list(self)
            else:
                return visitor.visitChildren(self)




    def ident_list(self):

        localctx = apgParser.Ident_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_ident_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.ident()
            self.state = 280
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 276
                    self.match(apgParser.COMMA)
                    self.state = 277
                    self.ident() 
                self.state = 282
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 283
                self.match(apgParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.StringContext)
            else:
                return self.getTypedRuleContext(apgParser.StringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_string_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_list" ):
                listener.enterString_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_list" ):
                listener.exitString_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_list" ):
                return visitor.visitString_list(self)
            else:
                return visitor.visitChildren(self)




    def string_list(self):

        localctx = apgParser.String_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_string_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.string()
            self.state = 291
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 287
                    self.match(apgParser.COMMA)
                    self.state = 288
                    self.string() 
                self.state = 293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 294
                self.match(apgParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.IdentContext)
            else:
                return self.getTypedRuleContext(apgParser.IdentContext,i)


        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def L_SQUARE(self):
            return self.getToken(apgParser.L_SQUARE, 0)

        def string_list(self):
            return self.getTypedRuleContext(apgParser.String_listContext,0)


        def R_SQUARE(self):
            return self.getToken(apgParser.R_SQUARE, 0)

        def ident_list(self):
            return self.getTypedRuleContext(apgParser.Ident_listContext,0)


        def int_(self):
            return self.getTypedRuleContext(apgParser.IntContext,0)


        def int_list(self):
            return self.getTypedRuleContext(apgParser.Int_listContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption" ):
                return visitor.visitOption(self)
            else:
                return visitor.visitChildren(self)




    def option(self):

        localctx = apgParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.ident()
            self.state = 298
            self.match(apgParser.EQ)
            self.state = 314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 299
                self.ident()
                pass

            elif la_ == 2:
                self.state = 300
                self.string()
                pass

            elif la_ == 3:
                self.state = 301
                self.match(apgParser.L_SQUARE)
                self.state = 302
                self.string_list()
                self.state = 303
                self.match(apgParser.R_SQUARE)
                pass

            elif la_ == 4:
                self.state = 305
                self.match(apgParser.L_SQUARE)
                self.state = 306
                self.ident_list()
                self.state = 307
                self.match(apgParser.R_SQUARE)
                pass

            elif la_ == 5:
                self.state = 309
                self.int_()
                pass

            elif la_ == 6:
                self.state = 310
                self.match(apgParser.L_SQUARE)
                self.state = 311
                self.int_list()
                self.state = 312
                self.match(apgParser.R_SQUARE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.OptionContext)
            else:
                return self.getTypedRuleContext(apgParser.OptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_list" ):
                listener.enterOption_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_list" ):
                listener.exitOption_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption_list" ):
                return visitor.visitOption_list(self)
            else:
                return visitor.visitChildren(self)




    def option_list(self):

        localctx = apgParser.Option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_option_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.option()
            self.state = 321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 317
                    self.match(apgParser.COMMA)
                    self.state = 318
                    self.option() 
                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 324
                self.match(apgParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(apgParser.IMPORT, 0)

        def import_file_list(self):
            return self.getTypedRuleContext(apgParser.Import_file_listContext,0)


        def INCLUDE(self):
            return self.getToken(apgParser.INCLUDE, 0)

        def getRuleIndex(self):
            return apgParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = apgParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_importDeclaration)
        try:
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [197]:
                self.enterOuterAlt(localctx, 1)
                self.state = 327
                self.match(apgParser.IMPORT)
                self.state = 328
                self.import_file_list()
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self.match(apgParser.INCLUDE)
                self.state = 330
                self.import_file_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_file_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Ident_listContext)
            else:
                return self.getTypedRuleContext(apgParser.Ident_listContext,i)


        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.String_listContext)
            else:
                return self.getTypedRuleContext(apgParser.String_listContext,i)


        def getRuleIndex(self):
            return apgParser.RULE_import_file_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_file_list" ):
                listener.enterImport_file_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_file_list" ):
                listener.exitImport_file_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_file_list" ):
                return visitor.visitImport_file_list(self)
            else:
                return visitor.visitChildren(self)




    def import_file_list(self):

        localctx = apgParser.Import_file_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_import_file_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 335
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [243]:
                    self.state = 333
                    self.ident_list()
                    pass
                elif token in [128]:
                    self.state = 334
                    self.string_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 337 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==128 or _la==243):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROJECT(self):
            return self.getToken(apgParser.PROJECT, 0)

        def projectName(self):
            return self.getTypedRuleContext(apgParser.ProjectNameContext,0)


        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def project_property_list(self):
            return self.getTypedRuleContext(apgParser.Project_property_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_projectBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectBlock" ):
                listener.enterProjectBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectBlock" ):
                listener.exitProjectBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectBlock" ):
                return visitor.visitProjectBlock(self)
            else:
                return visitor.visitChildren(self)




    def projectBlock(self):

        localctx = apgParser.ProjectBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_projectBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(apgParser.PROJECT)
            self.state = 340
            self.projectName()
            self.state = 341
            self.match(apgParser.L_CURLY)
            self.state = 342
            self.project_property_list()
            self.state = 343
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_projectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectName" ):
                listener.enterProjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectName" ):
                listener.exitProjectName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectName" ):
                return visitor.visitProjectName(self)
            else:
                return visitor.visitChildren(self)




    def projectName(self):

        localctx = apgParser.ProjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_projectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_property_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def project_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Project_propertyContext)
            else:
                return self.getTypedRuleContext(apgParser.Project_propertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_project_property_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_property_list" ):
                listener.enterProject_property_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_property_list" ):
                listener.exitProject_property_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProject_property_list" ):
                return visitor.visitProject_property_list(self)
            else:
                return visitor.visitChildren(self)




    def project_property_list(self):

        localctx = apgParser.Project_property_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_project_property_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.project_property()
            self.state = 352
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 348
                    self.match(apgParser.COMMA)
                    self.state = 349
                    self.project_property() 
                self.state = 354
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 355
                self.match(apgParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def VERSION(self):
            return self.getToken(apgParser.VERSION, 0)

        def VersionLiteral(self):
            return self.getToken(apgParser.VersionLiteral, 0)

        def language(self):
            return self.getTypedRuleContext(apgParser.LanguageContext,0)


        def theme(self):
            return self.getTypedRuleContext(apgParser.ThemeContext,0)


        def cloudCfg(self):
            return self.getTypedRuleContext(apgParser.CloudCfgContext,0)


        def authCfg(self):
            return self.getTypedRuleContext(apgParser.AuthCfgContext,0)


        def thirdPartyCfg(self):
            return self.getTypedRuleContext(apgParser.ThirdPartyCfgContext,0)


        def perfCfg(self):
            return self.getTypedRuleContext(apgParser.PerfCfgContext,0)


        def versionCfg(self):
            return self.getTypedRuleContext(apgParser.VersionCfgContext,0)


        def pluginCfg(self):
            return self.getTypedRuleContext(apgParser.PluginCfgContext,0)


        def genOptions(self):
            return self.getTypedRuleContext(apgParser.GenOptionsContext,0)


        def option_list(self):
            return self.getTypedRuleContext(apgParser.Option_listContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_project_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_property" ):
                listener.enterProject_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_property" ):
                listener.exitProject_property(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProject_property" ):
                return visitor.visitProject_property(self)
            else:
                return visitor.visitChildren(self)




    def project_property(self):

        localctx = apgParser.Project_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_project_property)
        self._la = 0 # Token type
        try:
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 358
                self.match(apgParser.T__0)
                self.state = 359
                self.match(apgParser.EQ)
                self.state = 360
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==235:
                    self.state = 361
                    self.match(apgParser.VERSION)
                    self.state = 362
                    self.match(apgParser.EQ)
                    self.state = 365
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [136]:
                        self.state = 363
                        self.match(apgParser.VersionLiteral)
                        pass
                    elif token in [128]:
                        self.state = 364
                        self.string()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 369
                self.language()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==229:
                    self.state = 370
                    self.theme()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 373
                    self.cloudCfg()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 376
                    self.authCfg()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 379
                    self.thirdPartyCfg()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 382
                    self.perfCfg()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 385
                    self.versionCfg()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 388
                    self.pluginCfg()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==196:
                    self.state = 391
                    self.genOptions()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243:
                    self.state = 394
                    self.option_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloudCfgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def cloud_option_list(self):
            return self.getTypedRuleContext(apgParser.Cloud_option_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_cloudCfg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloudCfg" ):
                listener.enterCloudCfg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloudCfg" ):
                listener.exitCloudCfg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloudCfg" ):
                return visitor.visitCloudCfg(self)
            else:
                return visitor.visitChildren(self)




    def cloudCfg(self):

        localctx = apgParser.CloudCfgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_cloudCfg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(apgParser.T__1)
            self.state = 400
            self.match(apgParser.EQ)
            self.state = 401
            self.match(apgParser.L_CURLY)
            self.state = 402
            self.cloud_option_list()
            self.state = 403
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cloud_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def option_list(self):
            return self.getTypedRuleContext(apgParser.Option_listContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_cloud_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloud_option_list" ):
                listener.enterCloud_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloud_option_list" ):
                listener.exitCloud_option_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloud_option_list" ):
                return visitor.visitCloud_option_list(self)
            else:
                return visitor.visitChildren(self)




    def cloud_option_list(self):

        localctx = apgParser.Cloud_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_cloud_option_list)
        self._la = 0 # Token type
        try:
            self.state = 409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.match(apgParser.T__2)
                self.state = 406
                self.match(apgParser.EQ)
                self.state = 407
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 112) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 2)
                self.state = 408
                self.option_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthCfgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def option_list(self):
            return self.getTypedRuleContext(apgParser.Option_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_authCfg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthCfg" ):
                listener.enterAuthCfg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthCfg" ):
                listener.exitAuthCfg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAuthCfg" ):
                return visitor.visitAuthCfg(self)
            else:
                return visitor.visitChildren(self)




    def authCfg(self):

        localctx = apgParser.AuthCfgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_authCfg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(apgParser.T__6)
            self.state = 412
            self.match(apgParser.EQ)
            self.state = 413
            self.match(apgParser.L_CURLY)
            self.state = 414
            self.option_list()
            self.state = 415
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThirdPartyCfgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def option_list(self):
            return self.getTypedRuleContext(apgParser.Option_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_thirdPartyCfg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThirdPartyCfg" ):
                listener.enterThirdPartyCfg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThirdPartyCfg" ):
                listener.exitThirdPartyCfg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThirdPartyCfg" ):
                return visitor.visitThirdPartyCfg(self)
            else:
                return visitor.visitChildren(self)




    def thirdPartyCfg(self):

        localctx = apgParser.ThirdPartyCfgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_thirdPartyCfg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(apgParser.T__7)
            self.state = 418
            self.match(apgParser.EQ)
            self.state = 419
            self.match(apgParser.L_CURLY)
            self.state = 420
            self.option_list()
            self.state = 421
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerfCfgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def option_list(self):
            return self.getTypedRuleContext(apgParser.Option_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_perfCfg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerfCfg" ):
                listener.enterPerfCfg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerfCfg" ):
                listener.exitPerfCfg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerfCfg" ):
                return visitor.visitPerfCfg(self)
            else:
                return visitor.visitChildren(self)




    def perfCfg(self):

        localctx = apgParser.PerfCfgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_perfCfg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.match(apgParser.T__8)
            self.state = 424
            self.match(apgParser.EQ)
            self.state = 425
            self.match(apgParser.L_CURLY)
            self.state = 426
            self.option_list()
            self.state = 427
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionCfgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def option_list(self):
            return self.getTypedRuleContext(apgParser.Option_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_versionCfg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionCfg" ):
                listener.enterVersionCfg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionCfg" ):
                listener.exitVersionCfg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionCfg" ):
                return visitor.visitVersionCfg(self)
            else:
                return visitor.visitChildren(self)




    def versionCfg(self):

        localctx = apgParser.VersionCfgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_versionCfg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(apgParser.T__9)
            self.state = 430
            self.match(apgParser.EQ)
            self.state = 431
            self.match(apgParser.L_CURLY)
            self.state = 432
            self.option_list()
            self.state = 433
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PluginCfgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def option_list(self):
            return self.getTypedRuleContext(apgParser.Option_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_pluginCfg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPluginCfg" ):
                listener.enterPluginCfg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPluginCfg" ):
                listener.exitPluginCfg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPluginCfg" ):
                return visitor.visitPluginCfg(self)
            else:
                return visitor.visitChildren(self)




    def pluginCfg(self):

        localctx = apgParser.PluginCfgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_pluginCfg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(apgParser.T__10)
            self.state = 436
            self.match(apgParser.EQ)
            self.state = 437
            self.match(apgParser.L_CURLY)
            self.state = 438
            self.option_list()
            self.state = 439
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERATE(self):
            return self.getToken(apgParser.GENERATE, 0)

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_SQUARE(self):
            return self.getToken(apgParser.L_SQUARE, 0)

        def appGenTarget(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.AppGenTargetContext)
            else:
                return self.getTypedRuleContext(apgParser.AppGenTargetContext,i)


        def R_SQUARE(self):
            return self.getToken(apgParser.R_SQUARE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_genOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenOptions" ):
                listener.enterGenOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenOptions" ):
                listener.exitGenOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenOptions" ):
                return visitor.visitGenOptions(self)
            else:
                return visitor.visitChildren(self)




    def genOptions(self):

        localctx = apgParser.GenOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_genOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(apgParser.GENERATE)
            self.state = 442
            self.match(apgParser.EQ)
            self.state = 443
            self.match(apgParser.L_SQUARE)
            self.state = 444
            self.appGenTarget()
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 445
                self.match(apgParser.COMMA)
                self.state = 446
                self.appGenTarget()
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 452
            self.match(apgParser.R_SQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppGenTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IOS(self):
            return self.getToken(apgParser.IOS, 0)

        def WEB(self):
            return self.getToken(apgParser.WEB, 0)

        def DESKTOP(self):
            return self.getToken(apgParser.DESKTOP, 0)

        def ANDROID(self):
            return self.getToken(apgParser.ANDROID, 0)

        def SQL(self):
            return self.getToken(apgParser.SQL, 0)

        def DIALECT(self):
            return self.getToken(apgParser.DIALECT, 0)

        def db(self):
            return self.getTypedRuleContext(apgParser.DbContext,0)


        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_appGenTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppGenTarget" ):
                listener.enterAppGenTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppGenTarget" ):
                listener.exitAppGenTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAppGenTarget" ):
                return visitor.visitAppGenTarget(self)
            else:
                return visitor.visitChildren(self)




    def appGenTarget(self):

        localctx = apgParser.AppGenTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_appGenTarget)
        self._la = 0 # Token type
        try:
            self.state = 467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [200]:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.match(apgParser.IOS)
                pass
            elif token in [237]:
                self.enterOuterAlt(localctx, 2)
                self.state = 455
                self.match(apgParser.WEB)
                pass
            elif token in [191]:
                self.enterOuterAlt(localctx, 3)
                self.state = 456
                self.match(apgParser.DESKTOP)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 4)
                self.state = 457
                self.match(apgParser.ANDROID)
                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 5)
                self.state = 458
                self.match(apgParser.SQL)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==192:
                    self.state = 459
                    self.match(apgParser.DIALECT)
                    self.state = 462
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [185, 206, 207, 208, 214, 217, 226]:
                        self.state = 460
                        self.db()
                        pass
                    elif token in [128]:
                        self.state = 461
                        self.string()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 6)
                self.state = 466
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LanguageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGES(self):
            return self.getToken(apgParser.LANGUAGES, 0)

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def lang_list(self):
            return self.getTypedRuleContext(apgParser.Lang_listContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_language

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguage" ):
                listener.enterLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguage" ):
                listener.exitLanguage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLanguage" ):
                return visitor.visitLanguage(self)
            else:
                return visitor.visitChildren(self)




    def language(self):

        localctx = apgParser.LanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_language)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(apgParser.LANGUAGES)
            self.state = 470
            self.match(apgParser.EQ)
            self.state = 471
            self.lang_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lang_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SQUARE(self):
            return self.getToken(apgParser.L_SQUARE, 0)

        def string_list(self):
            return self.getTypedRuleContext(apgParser.String_listContext,0)


        def R_SQUARE(self):
            return self.getToken(apgParser.R_SQUARE, 0)

        def getRuleIndex(self):
            return apgParser.RULE_lang_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLang_list" ):
                listener.enterLang_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLang_list" ):
                listener.exitLang_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLang_list" ):
                return visitor.visitLang_list(self)
            else:
                return visitor.visitChildren(self)




    def lang_list(self):

        localctx = apgParser.Lang_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_lang_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(apgParser.L_SQUARE)
            self.state = 474
            self.string_list()
            self.state = 475
            self.match(apgParser.R_SQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThemeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEME(self):
            return self.getToken(apgParser.THEME, 0)

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_theme

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheme" ):
                listener.enterTheme(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheme" ):
                listener.exitTheme(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheme" ):
                return visitor.visitTheme(self)
            else:
                return visitor.visitChildren(self)




    def theme(self):

        localctx = apgParser.ThemeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_theme)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(apgParser.THEME)
            self.state = 478
            self.match(apgParser.EQ)
            self.state = 479
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.ObjectContext)
            else:
                return self.getTypedRuleContext(apgParser.ObjectContext,i)


        def business_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Business_ruleContext)
            else:
                return self.getTypedRuleContext(apgParser.Business_ruleContext,i)


        def getRuleIndex(self):
            return apgParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = apgParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 483
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [12, 69, 95, 97, 98, 152, 186, 187, 204, 221, 227]:
                        self.state = 481
                        self.object_()
                        pass
                    elif token in [224]:
                        self.state = 482
                        self.business_rule()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 485 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def database(self):
            return self.getTypedRuleContext(apgParser.DatabaseContext,0)


        def mixin(self):
            return self.getTypedRuleContext(apgParser.MixinContext,0)


        def enum_ext(self):
            return self.getTypedRuleContext(apgParser.Enum_extContext,0)


        def table(self):
            return self.getTypedRuleContext(apgParser.TableContext,0)


        def dbview(self):
            return self.getTypedRuleContext(apgParser.DbviewContext,0)


        def dbfunc(self):
            return self.getTypedRuleContext(apgParser.DbfuncContext,0)


        def index_ext(self):
            return self.getTypedRuleContext(apgParser.Index_extContext,0)


        def ref_ext(self):
            return self.getTypedRuleContext(apgParser.Ref_extContext,0)


        def trigger(self):
            return self.getTypedRuleContext(apgParser.TriggerContext,0)


        def workflow(self):
            return self.getTypedRuleContext(apgParser.WorkflowContext,0)


        def script(self):
            return self.getTypedRuleContext(apgParser.ScriptContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject" ):
                listener.enterObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject" ):
                listener.exitObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject" ):
                return visitor.visitObject(self)
            else:
                return visitor.visitChildren(self)




    def object_(self):

        localctx = apgParser.ObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_object)
        try:
            self.state = 498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.database()
                pass
            elif token in [204]:
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.mixin()
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 3)
                self.state = 489
                self.enum_ext()
                pass
            elif token in [227]:
                self.enterOuterAlt(localctx, 4)
                self.state = 490
                self.table()
                pass
            elif token in [187]:
                self.enterOuterAlt(localctx, 5)
                self.state = 491
                self.dbview()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 6)
                self.state = 492
                self.dbfunc()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 7)
                self.state = 493
                self.index_ext()
                pass
            elif token in [221]:
                self.enterOuterAlt(localctx, 8)
                self.state = 494
                self.ref_ext()
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 9)
                self.state = 495
                self.trigger()
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 10)
                self.state = 496
                self.workflow()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 11)
                self.state = 497
                self.script()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dbname(self):
            return self.getTypedRuleContext(apgParser.DbnameContext,0)


        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def database_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Database_optionsContext)
            else:
                return self.getTypedRuleContext(apgParser.Database_optionsContext,i)


        def getRuleIndex(self):
            return apgParser.RULE_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase" ):
                listener.enterDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase" ):
                listener.exitDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase" ):
                return visitor.visitDatabase(self)
            else:
                return visitor.visitChildren(self)




    def database(self):

        localctx = apgParser.DatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(apgParser.T__11)
            self.state = 501
            self.dbname()
            self.state = 502
            self.match(apgParser.L_CURLY)
            self.state = 504 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 503
                self.database_options()
                self.state = 506 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 122880) != 0) or _la==243):
                    break

            self.state = 508
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_dbname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbname" ):
                listener.enterDbname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbname" ):
                listener.exitDbname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbname" ):
                return visitor.visitDbname(self)
            else:
                return visitor.visitChildren(self)




    def dbname(self):

        localctx = apgParser.DbnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dbname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def TIME_INTERVAL(self):
            return self.getToken(apgParser.TIME_INTERVAL, 0)

        def string_list(self):
            return self.getTypedRuleContext(apgParser.String_listContext,0)


        def option(self):
            return self.getTypedRuleContext(apgParser.OptionContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_database_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_options" ):
                listener.enterDatabase_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_options" ):
                listener.exitDatabase_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_options" ):
                return visitor.visitDatabase_options(self)
            else:
                return visitor.visitChildren(self)




    def database_options(self):

        localctx = apgParser.Database_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_database_options)
        try:
            self.state = 525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 512
                self.match(apgParser.T__12)
                self.state = 513
                self.match(apgParser.EQ)
                self.state = 514
                self.string()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 515
                self.match(apgParser.T__13)
                self.state = 516
                self.match(apgParser.EQ)
                self.state = 517
                self.match(apgParser.TIME_INTERVAL)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 3)
                self.state = 518
                self.match(apgParser.T__14)
                self.state = 519
                self.match(apgParser.EQ)
                self.state = 520
                self.string_list()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 4)
                self.state = 521
                self.match(apgParser.T__15)
                self.state = 522
                self.match(apgParser.EQ)
                self.state = 523
                self.string_list()
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 5)
                self.state = 524
                self.option()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXIN(self):
            return self.getToken(apgParser.MIXIN, 0)

        def mixin_name(self):
            return self.getTypedRuleContext(apgParser.Mixin_nameContext,0)


        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def column_list(self):
            return self.getTypedRuleContext(apgParser.Column_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_mixin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixin" ):
                listener.enterMixin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixin" ):
                listener.exitMixin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMixin" ):
                return visitor.visitMixin(self)
            else:
                return visitor.visitChildren(self)




    def mixin(self):

        localctx = apgParser.MixinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_mixin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(apgParser.MIXIN)
            self.state = 528
            self.mixin_name()
            self.state = 529
            self.match(apgParser.L_CURLY)
            self.state = 530
            self.column_list()
            self.state = 531
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mixin_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_mixin_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixin_name" ):
                listener.enterMixin_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixin_name" ):
                listener.exitMixin_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMixin_name" ):
                return visitor.visitMixin_name(self)
            else:
                return visitor.visitChildren(self)




    def mixin_name(self):

        localctx = apgParser.Mixin_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_mixin_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(apgParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(apgParser.Table_nameContext,0)


        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)

        def mixin_list(self):
            return self.getTypedRuleContext(apgParser.Mixin_listContext,0)


        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Column_listContext)
            else:
                return self.getTypedRuleContext(apgParser.Column_listContext,i)


        def index_int(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Index_intContext)
            else:
                return self.getTypedRuleContext(apgParser.Index_intContext,i)


        def note_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Note_optionContext)
            else:
                return self.getTypedRuleContext(apgParser.Note_optionContext,i)


        def getRuleIndex(self):
            return apgParser.RULE_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)




    def table(self):

        localctx = apgParser.TableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.match(apgParser.TABLE)
            self.state = 536
            self.table_name()
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 537
                self.match(apgParser.L_PAR)
                self.state = 538
                self.mixin_list()
                self.state = 539
                self.match(apgParser.R_PAR)


            self.state = 543
            self.match(apgParser.L_CURLY)
            self.state = 547 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 547
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [243]:
                    self.state = 544
                    self.column_list()
                    pass
                elif token in [76]:
                    self.state = 545
                    self.index_int()
                    pass
                elif token in [210]:
                    self.state = 546
                    self.note_option()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 549 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==76 or _la==210 or _la==243):
                    break

            self.state = 551
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mixin_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mixin_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Mixin_nameContext)
            else:
                return self.getTypedRuleContext(apgParser.Mixin_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_mixin_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixin_list" ):
                listener.enterMixin_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixin_list" ):
                listener.exitMixin_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMixin_list" ):
                return visitor.visitMixin_list(self)
            else:
                return visitor.visitChildren(self)




    def mixin_list(self):

        localctx = apgParser.Mixin_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_mixin_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.mixin_name()
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 554
                self.match(apgParser.COMMA)
                self.state = 555
                self.mixin_name()
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = apgParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.ColumnContext)
            else:
                return self.getTypedRuleContext(apgParser.ColumnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_list" ):
                return visitor.visitColumn_list(self)
            else:
                return visitor.visitChildren(self)




    def column_list(self):

        localctx = apgParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.column()
            self.state = 568
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 564
                    self.match(apgParser.COMMA)
                    self.state = 565
                    self.column() 
                self.state = 570
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 571
                self.match(apgParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(apgParser.Column_nameContext,0)


        def COLON(self):
            return self.getToken(apgParser.COLON, 0)

        def data_type(self):
            return self.getTypedRuleContext(apgParser.Data_typeContext,0)


        def column_option_list(self):
            return self.getTypedRuleContext(apgParser.Column_option_listContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn" ):
                listener.enterColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn" ):
                listener.exitColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn" ):
                return visitor.visitColumn(self)
            else:
                return visitor.visitChildren(self)




    def column(self):

        localctx = apgParser.ColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.column_name()
            self.state = 575
            self.match(apgParser.COLON)
            self.state = 576
            self.data_type()
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 577
                self.column_option_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = apgParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(apgParser.BOOL, 0)

        def DOUBLE(self):
            return self.getToken(apgParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(apgParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(apgParser.CHAR, 0)

        def varchar(self):
            return self.getTypedRuleContext(apgParser.VarcharContext,0)


        def BLOB(self):
            return self.getToken(apgParser.BLOB, 0)

        def SUPER(self):
            return self.getToken(apgParser.SUPER, 0)

        def FILE(self):
            return self.getToken(apgParser.FILE, 0)

        def enum_name(self):
            return self.getTypedRuleContext(apgParser.Enum_nameContext,0)


        def int_list(self):
            return self.getTypedRuleContext(apgParser.Int_listContext,0)


        def data_type(self):
            return self.getTypedRuleContext(apgParser.Data_typeContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_type" ):
                return visitor.visitData_type(self)
            else:
                return visitor.visitChildren(self)




    def data_type(self):

        localctx = apgParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_data_type)
        try:
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.match(apgParser.T__16)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.match(apgParser.T__17)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 584
                self.match(apgParser.T__18)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 585
                self.match(apgParser.BOOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 586
                self.match(apgParser.T__19)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 587
                self.match(apgParser.T__20)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 588
                self.match(apgParser.T__21)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 589
                self.match(apgParser.T__22)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 590
                self.match(apgParser.T__23)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 591
                self.match(apgParser.DOUBLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 592
                self.match(apgParser.T__24)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 593
                self.match(apgParser.FLOAT)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 594
                self.match(apgParser.T__25)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 595
                self.match(apgParser.T__26)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 596
                self.match(apgParser.CHAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 597
                self.match(apgParser.T__27)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 598
                self.varchar()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 599
                self.match(apgParser.T__28)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 600
                self.match(apgParser.T__29)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 601
                self.match(apgParser.T__30)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 602
                self.match(apgParser.T__31)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 603
                self.match(apgParser.T__32)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 604
                self.match(apgParser.T__33)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 605
                self.match(apgParser.T__34)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 606
                self.match(apgParser.BLOB)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 607
                self.match(apgParser.T__35)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 608
                self.match(apgParser.T__36)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 609
                self.match(apgParser.T__37)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 610
                self.match(apgParser.T__38)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 611
                self.match(apgParser.T__39)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 612
                self.match(apgParser.T__40)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 613
                self.match(apgParser.T__41)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 614
                self.match(apgParser.T__42)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 615
                self.match(apgParser.T__43)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 616
                self.match(apgParser.T__44)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 617
                self.match(apgParser.T__45)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 618
                self.match(apgParser.T__46)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 619
                self.match(apgParser.T__47)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 620
                self.match(apgParser.T__48)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 621
                self.match(apgParser.T__49)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 622
                self.match(apgParser.T__50)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 623
                self.match(apgParser.T__51)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 624
                self.match(apgParser.T__52)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 625
                self.match(apgParser.T__53)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 626
                self.match(apgParser.SUPER)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 627
                self.match(apgParser.T__54)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 628
                self.match(apgParser.T__55)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 629
                self.match(apgParser.T__56)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 630
                self.match(apgParser.T__57)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 631
                self.match(apgParser.T__58)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 632
                self.match(apgParser.T__59)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 633
                self.match(apgParser.T__60)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)

                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 635
                self.match(apgParser.FILE)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 636
                self.match(apgParser.T__61)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 637
                self.match(apgParser.T__62)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 638
                self.match(apgParser.T__63)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 639
                self.enum_name()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 640
                self.match(apgParser.T__64)
                self.state = 641
                self.int_list()
                self.state = 642
                self.match(apgParser.T__65)
                self.state = 643
                self.data_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarcharContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARCHAR(self):
            return self.getToken(apgParser.VARCHAR, 0)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)

        def int_(self):
            return self.getTypedRuleContext(apgParser.IntContext,0)


        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def getRuleIndex(self):
            return apgParser.RULE_varchar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarchar" ):
                listener.enterVarchar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarchar" ):
                listener.exitVarchar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarchar" ):
                return visitor.visitVarchar(self)
            else:
                return visitor.visitChildren(self)




    def varchar(self):

        localctx = apgParser.VarcharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_varchar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(apgParser.VARCHAR)
            self.state = 648
            self.match(apgParser.L_PAR)
            self.state = 649
            self.int_()
            self.state = 650
            self.match(apgParser.R_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SQUARE(self):
            return self.getToken(apgParser.L_SQUARE, 0)

        def column_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Column_optionContext)
            else:
                return self.getTypedRuleContext(apgParser.Column_optionContext,i)


        def R_SQUARE(self):
            return self.getToken(apgParser.R_SQUARE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_column_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_option_list" ):
                listener.enterColumn_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_option_list" ):
                listener.exitColumn_option_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_option_list" ):
                return visitor.visitColumn_option_list(self)
            else:
                return visitor.visitChildren(self)




    def column_option_list(self):

        localctx = apgParser.Column_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_column_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(apgParser.L_SQUARE)
            self.state = 653
            self.column_option()
            self.state = 658
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 654
                    self.match(apgParser.COMMA)
                    self.state = 655
                    self.column_option() 
                self.state = 660
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 661
                self.match(apgParser.COMMA)


            self.state = 664
            self.match(apgParser.R_SQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_key(self):
            return self.getTypedRuleContext(apgParser.Primary_keyContext,0)


        def DEFAULT(self):
            return self.getToken(apgParser.DEFAULT, 0)

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def column_default(self):
            return self.getTypedRuleContext(apgParser.Column_defaultContext,0)


        def CACHE(self):
            return self.getToken(apgParser.CACHE, 0)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)

        def int_(self):
            return self.getTypedRuleContext(apgParser.IntContext,0)


        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def DEFAULT_EXPR(self):
            return self.getToken(apgParser.DEFAULT_EXPR, 0)

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def INCR(self):
            return self.getToken(apgParser.INCR, 0)

        def DECR(self):
            return self.getToken(apgParser.DECR, 0)

        def unique(self):
            return self.getTypedRuleContext(apgParser.UniqueContext,0)


        def NULLABLE(self):
            return self.getToken(apgParser.NULLABLE, 0)

        def NOT_NULL(self):
            return self.getToken(apgParser.NOT_NULL, 0)

        def ref_internal(self):
            return self.getTypedRuleContext(apgParser.Ref_internalContext,0)


        def enum_internal(self):
            return self.getTypedRuleContext(apgParser.Enum_internalContext,0)


        def MIN(self):
            return self.getToken(apgParser.MIN, 0)

        def MAX(self):
            return self.getToken(apgParser.MAX, 0)

        def check(self):
            return self.getTypedRuleContext(apgParser.CheckContext,0)


        def layout(self):
            return self.getTypedRuleContext(apgParser.LayoutContext,0)


        def note_option(self):
            return self.getTypedRuleContext(apgParser.Note_optionContext,0)


        def PLACEHOLDER(self):
            return self.getToken(apgParser.PLACEHOLDER, 0)

        def LABEL(self):
            return self.getToken(apgParser.LABEL, 0)

        def getRuleIndex(self):
            return apgParser.RULE_column_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_option" ):
                listener.enterColumn_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_option" ):
                listener.exitColumn_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_option" ):
                return visitor.visitColumn_option(self)
            else:
                return visitor.visitChildren(self)




    def column_option(self):

        localctx = apgParser.Column_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_column_option)
        self._la = 0 # Token type
        try:
            self.state = 705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.primary_key()
                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 2)
                self.state = 667
                self.match(apgParser.DEFAULT)
                self.state = 668
                self.match(apgParser.EQ)
                self.state = 669
                self.column_default()
                pass
            elif token in [181]:
                self.enterOuterAlt(localctx, 3)
                self.state = 670
                self.match(apgParser.CACHE)
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 671
                    self.match(apgParser.L_PAR)
                    self.state = 672
                    self.int_()
                    self.state = 673
                    self.match(apgParser.R_PAR)


                pass
            elif token in [189]:
                self.enterOuterAlt(localctx, 4)
                self.state = 677
                self.match(apgParser.DEFAULT_EXPR)
                self.state = 678
                self.match(apgParser.EQ)
                self.state = 679
                self.match(apgParser.L_PAR)
                self.state = 680
                self.string()
                self.state = 681
                self.match(apgParser.R_PAR)
                pass
            elif token in [199]:
                self.enterOuterAlt(localctx, 5)
                self.state = 683
                self.match(apgParser.INCR)
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 6)
                self.state = 684
                self.match(apgParser.DECR)
                pass
            elif token in [233]:
                self.enterOuterAlt(localctx, 7)
                self.state = 685
                self.unique()
                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 8)
                self.state = 686
                self.match(apgParser.NULLABLE)
                pass
            elif token in [209]:
                self.enterOuterAlt(localctx, 9)
                self.state = 687
                self.match(apgParser.NOT_NULL)
                pass
            elif token in [221]:
                self.enterOuterAlt(localctx, 10)
                self.state = 688
                self.ref_internal()
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 11)
                self.state = 689
                self.enum_internal()
                pass
            elif token in [203]:
                self.enterOuterAlt(localctx, 12)
                self.state = 690
                self.match(apgParser.MIN)
                self.state = 691
                self.match(apgParser.EQ)
                self.state = 692
                self.int_()
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 13)
                self.state = 693
                self.match(apgParser.MAX)
                self.state = 694
                self.match(apgParser.EQ)
                self.state = 695
                self.int_()
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 14)
                self.state = 696
                self.check()
                pass
            elif token in [194]:
                self.enterOuterAlt(localctx, 15)
                self.state = 697
                self.layout()
                pass
            elif token in [210]:
                self.enterOuterAlt(localctx, 16)
                self.state = 698
                self.note_option()
                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 17)
                self.state = 699
                self.match(apgParser.PLACEHOLDER)
                self.state = 700
                self.match(apgParser.EQ)
                self.state = 701
                self.string()
                pass
            elif token in [193]:
                self.enterOuterAlt(localctx, 18)
                self.state = 702
                self.match(apgParser.LABEL)
                self.state = 703
                self.match(apgParser.EQ)
                self.state = 704
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_SHORT(self):
            return self.getToken(apgParser.PK_SHORT, 0)

        def getRuleIndex(self):
            return apgParser.RULE_primary_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_key" ):
                listener.enterPrimary_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_key" ):
                listener.exitPrimary_key(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary_key" ):
                return visitor.visitPrimary_key(self)
            else:
                return visitor.visitChildren(self)




    def primary_key(self):

        localctx = apgParser.Primary_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_primary_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            _la = self._input.LA(1)
            if not(_la==219):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(apgParser.Number, 0)

        def Bool(self):
            return self.getToken(apgParser.Bool, 0)

        def NOW(self):
            return self.getToken(apgParser.NOW, 0)

        def TODAY(self):
            return self.getToken(apgParser.TODAY, 0)

        def TOMORROW(self):
            return self.getToken(apgParser.TOMORROW, 0)

        def NULL(self):
            return self.getToken(apgParser.NULL, 0)

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_column_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_default" ):
                listener.enterColumn_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_default" ):
                listener.exitColumn_default(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_default" ):
                return visitor.visitColumn_default(self)
            else:
                return visitor.visitChildren(self)




    def column_default(self):

        localctx = apgParser.Column_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_column_default)
        try:
            self.state = 718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 709
                self.match(apgParser.Number)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 710
                self.match(apgParser.Bool)
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 3)
                self.state = 711
                self.match(apgParser.NOW)
                pass
            elif token in [230]:
                self.enterOuterAlt(localctx, 4)
                self.state = 712
                self.match(apgParser.TODAY)
                pass
            elif token in [231]:
                self.enterOuterAlt(localctx, 5)
                self.state = 713
                self.match(apgParser.TOMORROW)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 6)
                self.state = 714
                self.match(apgParser.T__66)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 7)
                self.state = 715
                self.match(apgParser.T__67)
                pass
            elif token in [212]:
                self.enterOuterAlt(localctx, 8)
                self.state = 716
                self.match(apgParser.NULL)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 9)
                self.state = 717
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_internalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(apgParser.REF, 0)

        def COLON(self):
            return self.getToken(apgParser.COLON, 0)

        def ref_type(self):
            return self.getTypedRuleContext(apgParser.Ref_typeContext,0)


        def table_name(self):
            return self.getTypedRuleContext(apgParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.DOT)
            else:
                return self.getToken(apgParser.DOT, i)

        def column_name(self):
            return self.getTypedRuleContext(apgParser.Column_nameContext,0)


        def ref_name(self):
            return self.getTypedRuleContext(apgParser.Ref_nameContext,0)


        def dbname(self):
            return self.getTypedRuleContext(apgParser.DbnameContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_ref_internal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_internal" ):
                listener.enterRef_internal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_internal" ):
                listener.exitRef_internal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRef_internal" ):
                return visitor.visitRef_internal(self)
            else:
                return visitor.visitChildren(self)




    def ref_internal(self):

        localctx = apgParser.Ref_internalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ref_internal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(apgParser.REF)
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==243:
                self.state = 721
                self.ref_name()


            self.state = 724
            self.match(apgParser.COLON)
            self.state = 725
            self.ref_type()
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 726
                self.dbname()
                self.state = 727
                self.match(apgParser.DOT)


            self.state = 731
            self.table_name()
            self.state = 732
            self.match(apgParser.DOT)
            self.state = 733
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_extContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(apgParser.REF, 0)

        def COLON(self):
            return self.getToken(apgParser.COLON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(apgParser.Table_nameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.DOT)
            else:
                return self.getToken(apgParser.DOT, i)

        def ref_type(self):
            return self.getTypedRuleContext(apgParser.Ref_typeContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(apgParser.Column_nameContext,i)


        def ref_name(self):
            return self.getTypedRuleContext(apgParser.Ref_nameContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_ref_ext

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_ext" ):
                listener.enterRef_ext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_ext" ):
                listener.exitRef_ext(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRef_ext" ):
                return visitor.visitRef_ext(self)
            else:
                return visitor.visitChildren(self)




    def ref_ext(self):

        localctx = apgParser.Ref_extContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ref_ext)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(apgParser.REF)
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==243:
                self.state = 736
                self.ref_name()


            self.state = 739
            self.match(apgParser.COLON)
            self.state = 740
            self.table_name()
            self.state = 741
            self.match(apgParser.DOT)

            self.state = 742
            self.column_name()
            self.state = 743
            self.ref_type()
            self.state = 744
            self.table_name()
            self.state = 745
            self.match(apgParser.DOT)

            self.state = 746
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_ref_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_name" ):
                listener.enterRef_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_name" ):
                listener.exitRef_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRef_name" ):
                return visitor.visitRef_name(self)
            else:
                return visitor.visitChildren(self)




    def ref_name(self):

        localctx = apgParser.Ref_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ref_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oneToOne(self):
            return self.getTypedRuleContext(apgParser.OneToOneContext,0)


        def oneToMany(self):
            return self.getTypedRuleContext(apgParser.OneToManyContext,0)


        def manyToOne(self):
            return self.getTypedRuleContext(apgParser.ManyToOneContext,0)


        def manyToMany(self):
            return self.getTypedRuleContext(apgParser.ManyToManyContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_ref_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_type" ):
                listener.enterRef_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_type" ):
                listener.exitRef_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRef_type" ):
                return visitor.visitRef_type(self)
            else:
                return visitor.visitChildren(self)




    def ref_type(self):

        localctx = apgParser.Ref_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ref_type)
        try:
            self.state = 754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.oneToOne()
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.oneToMany()
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 3)
                self.state = 752
                self.manyToOne()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 4)
                self.state = 753
                self.manyToMany()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneToOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(apgParser.SUB, 0)

        def getRuleIndex(self):
            return apgParser.RULE_oneToOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneToOne" ):
                listener.enterOneToOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneToOne" ):
                listener.exitOneToOne(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneToOne" ):
                return visitor.visitOneToOne(self)
            else:
                return visitor.visitChildren(self)




    def oneToOne(self):

        localctx = apgParser.OneToOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oneToOne)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(apgParser.SUB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneToManyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(apgParser.LT, 0)

        def getRuleIndex(self):
            return apgParser.RULE_oneToMany

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneToMany" ):
                listener.enterOneToMany(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneToMany" ):
                listener.exitOneToMany(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneToMany" ):
                return visitor.visitOneToMany(self)
            else:
                return visitor.visitChildren(self)




    def oneToMany(self):

        localctx = apgParser.OneToManyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oneToMany)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(apgParser.LT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ManyToOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(apgParser.GT, 0)

        def getRuleIndex(self):
            return apgParser.RULE_manyToOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManyToOne" ):
                listener.enterManyToOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManyToOne" ):
                listener.exitManyToOne(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManyToOne" ):
                return visitor.visitManyToOne(self)
            else:
                return visitor.visitChildren(self)




    def manyToOne(self):

        localctx = apgParser.ManyToOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_manyToOne)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(apgParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ManyToManyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def M2M(self):
            return self.getToken(apgParser.M2M, 0)

        def getRuleIndex(self):
            return apgParser.RULE_manyToMany

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManyToMany" ):
                listener.enterManyToMany(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManyToMany" ):
                listener.exitManyToMany(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManyToMany" ):
                return visitor.visitManyToMany(self)
            else:
                return visitor.visitChildren(self)




    def manyToMany(self):

        localctx = apgParser.ManyToManyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_manyToMany)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(apgParser.M2M)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_enum_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_name" ):
                listener.enterEnum_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_name" ):
                listener.exitEnum_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_name" ):
                return visitor.visitEnum_name(self)
            else:
                return visitor.visitChildren(self)




    def enum_name(self):

        localctx = apgParser.Enum_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_enum_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_internalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(apgParser.ENUM, 0)

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def enum_list(self):
            return self.getTypedRuleContext(apgParser.Enum_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_enum_internal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_internal" ):
                listener.enterEnum_internal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_internal" ):
                listener.exitEnum_internal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_internal" ):
                return visitor.visitEnum_internal(self)
            else:
                return visitor.visitChildren(self)




    def enum_internal(self):

        localctx = apgParser.Enum_internalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_enum_internal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(apgParser.ENUM)
            self.state = 767
            self.match(apgParser.EQ)
            self.state = 768
            self.match(apgParser.L_CURLY)
            self.state = 769
            self.enum_list()
            self.state = 770
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_extContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(apgParser.ENUM, 0)

        def enum_name(self):
            return self.getTypedRuleContext(apgParser.Enum_nameContext,0)


        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def enum_list(self):
            return self.getTypedRuleContext(apgParser.Enum_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_enum_ext

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_ext" ):
                listener.enterEnum_ext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_ext" ):
                listener.exitEnum_ext(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_ext" ):
                return visitor.visitEnum_ext(self)
            else:
                return visitor.visitChildren(self)




    def enum_ext(self):

        localctx = apgParser.Enum_extContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_enum_ext)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(apgParser.ENUM)
            self.state = 773
            self.enum_name()
            self.state = 774
            self.match(apgParser.EQ)
            self.state = 775
            self.match(apgParser.L_CURLY)
            self.state = 776
            self.enum_list()
            self.state = 777
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Enum_itemContext)
            else:
                return self.getTypedRuleContext(apgParser.Enum_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_enum_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_list" ):
                listener.enterEnum_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_list" ):
                listener.exitEnum_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_list" ):
                return visitor.visitEnum_list(self)
            else:
                return visitor.visitChildren(self)




    def enum_list(self):

        localctx = apgParser.Enum_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_enum_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.enum_item()
            self.state = 784
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 780
                    self.match(apgParser.COMMA)
                    self.state = 781
                    self.enum_item() 
                self.state = 786
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 787
                self.match(apgParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_value(self):
            return self.getTypedRuleContext(apgParser.Enum_valueContext,0)


        def enum_idx(self):
            return self.getTypedRuleContext(apgParser.Enum_idxContext,0)


        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_SQUARE(self):
            return self.getToken(apgParser.L_SQUARE, 0)

        def note_option(self):
            return self.getTypedRuleContext(apgParser.Note_optionContext,0)


        def R_SQUARE(self):
            return self.getToken(apgParser.R_SQUARE, 0)

        def getRuleIndex(self):
            return apgParser.RULE_enum_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_item" ):
                listener.enterEnum_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_item" ):
                listener.exitEnum_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_item" ):
                return visitor.visitEnum_item(self)
            else:
                return visitor.visitChildren(self)




    def enum_item(self):

        localctx = apgParser.Enum_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_enum_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 790
                self.enum_idx()
                self.state = 791
                self.match(apgParser.EQ)


            self.state = 795
            self.enum_value()
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 796
                self.match(apgParser.L_SQUARE)
                self.state = 797
                self.note_option()
                self.state = 798
                self.match(apgParser.R_SQUARE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_idxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_(self):
            return self.getTypedRuleContext(apgParser.IntContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_enum_idx

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_idx" ):
                listener.enterEnum_idx(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_idx" ):
                listener.exitEnum_idx(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_idx" ):
                return visitor.visitEnum_idx(self)
            else:
                return visitor.visitChildren(self)




    def enum_idx(self):

        localctx = apgParser.Enum_idxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_enum_idx)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.int_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_enum_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_value" ):
                listener.enterEnum_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_value" ):
                listener.exitEnum_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_value" ):
                return visitor.visitEnum_value(self)
            else:
                return visitor.visitChildren(self)




    def enum_value(self):

        localctx = apgParser.Enum_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_enum_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(apgParser.CHECK, 0)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)

        def check_expr(self):
            return self.getTypedRuleContext(apgParser.Check_exprContext,0)


        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def getRuleIndex(self):
            return apgParser.RULE_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck" ):
                listener.enterCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck" ):
                listener.exitCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck" ):
                return visitor.visitCheck(self)
            else:
                return visitor.visitChildren(self)




    def check(self):

        localctx = apgParser.CheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(apgParser.CHECK)
            self.state = 807
            self.match(apgParser.L_PAR)
            self.state = 808
            self.check_expr()
            self.state = 809
            self.match(apgParser.R_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Check_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_check_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck_expr" ):
                listener.enterCheck_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck_expr" ):
                listener.exitCheck_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck_expr" ):
                return visitor.visitCheck_expr(self)
            else:
                return visitor.visitChildren(self)




    def check_expr(self):

        localctx = apgParser.Check_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_check_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LayoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAYOUT(self):
            return self.getToken(apgParser.LAYOUT, 0)

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def option_list(self):
            return self.getTypedRuleContext(apgParser.Option_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_layout

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLayout" ):
                listener.enterLayout(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLayout" ):
                listener.exitLayout(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLayout" ):
                return visitor.visitLayout(self)
            else:
                return visitor.visitChildren(self)




    def layout(self):

        localctx = apgParser.LayoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_layout)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(apgParser.LAYOUT)
            self.state = 814
            self.match(apgParser.EQ)
            self.state = 815
            self.match(apgParser.L_CURLY)
            self.state = 816
            self.option_list()
            self.state = 817
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Note_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTE(self):
            return self.getToken(apgParser.NOTE, 0)

        def COLON(self):
            return self.getToken(apgParser.COLON, 0)

        def note_value(self):
            return self.getTypedRuleContext(apgParser.Note_valueContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_note_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNote_option" ):
                listener.enterNote_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNote_option" ):
                listener.exitNote_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNote_option" ):
                return visitor.visitNote_option(self)
            else:
                return visitor.visitChildren(self)




    def note_option(self):

        localctx = apgParser.Note_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_note_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(apgParser.NOTE)
            self.state = 820
            self.match(apgParser.COLON)
            self.state = 821
            self.note_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Note_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_note_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNote_value" ):
                listener.enterNote_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNote_value" ):
                listener.exitNote_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNote_value" ):
                return visitor.visitNote_value(self)
            else:
                return visitor.visitChildren(self)




    def note_value(self):

        localctx = apgParser.Note_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_note_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbviewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBVIEW(self):
            return self.getToken(apgParser.DBVIEW, 0)

        def view_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.View_nameContext)
            else:
                return self.getTypedRuleContext(apgParser.View_nameContext,i)


        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.DOT)
            else:
                return self.getToken(apgParser.DOT, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(apgParser.Column_nameContext,i)


        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(apgParser.Table_nameContext,i)


        def getRuleIndex(self):
            return apgParser.RULE_dbview

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbview" ):
                listener.enterDbview(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbview" ):
                listener.exitDbview(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbview" ):
                return visitor.visitDbview(self)
            else:
                return visitor.visitChildren(self)




    def dbview(self):

        localctx = apgParser.DbviewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dbview)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(apgParser.DBVIEW)
            self.state = 826
            self.view_name()
            self.state = 827
            self.match(apgParser.L_CURLY)

            self.state = 830
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 828
                self.table_name()
                pass

            elif la_ == 2:
                self.state = 829
                self.view_name()
                pass


            self.state = 832
            self.match(apgParser.DOT)
            self.state = 833
            self.column_name()
            self.state = 835
            self.match(apgParser.EQ)

            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 836
                self.table_name()
                pass

            elif la_ == 2:
                self.state = 837
                self.view_name()
                pass


            self.state = 840
            self.match(apgParser.DOT)
            self.state = 841
            self.column_name()
            self.state = 843
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitView_name" ):
                return visitor.visitView_name(self)
            else:
                return visitor.visitChildren(self)




    def view_name(self):

        localctx = apgParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_extContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(apgParser.Table_nameContext,0)


        def L_SQUARE(self):
            return self.getToken(apgParser.L_SQUARE, 0)

        def column_names(self):
            return self.getTypedRuleContext(apgParser.Column_namesContext,0)


        def R_SQUARE(self):
            return self.getToken(apgParser.R_SQUARE, 0)

        def index_name(self):
            return self.getTypedRuleContext(apgParser.Index_nameContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_index_ext

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_ext" ):
                listener.enterIndex_ext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_ext" ):
                listener.exitIndex_ext(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_ext" ):
                return visitor.visitIndex_ext(self)
            else:
                return visitor.visitChildren(self)




    def index_ext(self):

        localctx = apgParser.Index_extContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_index_ext)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.match(apgParser.T__68)
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==243:
                self.state = 848
                self.index_name()


            self.state = 851
            self.match(apgParser.T__69)
            self.state = 852
            self.table_name()
            self.state = 853
            self.match(apgParser.L_SQUARE)
            self.state = 854
            self.column_names()
            self.state = 855
            self.match(apgParser.R_SQUARE)
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 856
                self.match(apgParser.T__70)
                self.state = 857
                _la = self._input.LA(1)
                if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def index_item_list(self):
            return self.getTypedRuleContext(apgParser.Index_item_listContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_index_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_int" ):
                listener.enterIndex_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_int" ):
                listener.exitIndex_int(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_int" ):
                return visitor.visitIndex_int(self)
            else:
                return visitor.visitChildren(self)




    def index_int(self):

        localctx = apgParser.Index_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_index_int)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(apgParser.T__75)
            self.state = 861
            self.match(apgParser.EQ)
            self.state = 862
            self.match(apgParser.L_CURLY)
            self.state = 863
            self.index_item_list()
            self.state = 864
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_item_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Index_itemContext)
            else:
                return self.getTypedRuleContext(apgParser.Index_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_index_item_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_item_list" ):
                listener.enterIndex_item_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_item_list" ):
                listener.exitIndex_item_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_item_list" ):
                return visitor.visitIndex_item_list(self)
            else:
                return visitor.visitChildren(self)




    def index_item_list(self):

        localctx = apgParser.Index_item_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_index_item_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.index_item()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 867
                self.match(apgParser.COMMA)
                self.state = 868
                self.index_item()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SQUARE(self):
            return self.getToken(apgParser.L_SQUARE, 0)

        def column_names(self):
            return self.getTypedRuleContext(apgParser.Column_namesContext,0)


        def R_SQUARE(self):
            return self.getToken(apgParser.R_SQUARE, 0)

        def index_name(self):
            return self.getTypedRuleContext(apgParser.Index_nameContext,0)


        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def getRuleIndex(self):
            return apgParser.RULE_index_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_item" ):
                listener.enterIndex_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_item" ):
                listener.exitIndex_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_item" ):
                return visitor.visitIndex_item(self)
            else:
                return visitor.visitChildren(self)




    def index_item(self):

        localctx = apgParser.Index_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_index_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==243:
                self.state = 874
                self.index_name()
                self.state = 875
                self.match(apgParser.EQ)


            self.state = 879
            self.match(apgParser.L_SQUARE)
            self.state = 880
            self.column_names()
            self.state = 881
            self.match(apgParser.R_SQUARE)
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 882
                self.match(apgParser.T__70)
                self.state = 883
                _la = self._input.LA(1)
                if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(apgParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_column_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_names" ):
                listener.enterColumn_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_names" ):
                listener.exitColumn_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_names" ):
                return visitor.visitColumn_names(self)
            else:
                return visitor.visitChildren(self)




    def column_names(self):

        localctx = apgParser.Column_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_column_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.column_name()
            self.state = 891
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 887
                    self.match(apgParser.COMMA)
                    self.state = 888
                    self.column_name() 
                self.state = 893
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 894
                self.match(apgParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = apgParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBFUNC(self):
            return self.getToken(apgParser.DBFUNC, 0)

        def func_name(self):
            return self.getTypedRuleContext(apgParser.Func_nameContext,0)


        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def func_body(self):
            return self.getTypedRuleContext(apgParser.Func_bodyContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_dbfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbfunc" ):
                listener.enterDbfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbfunc" ):
                listener.exitDbfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbfunc" ):
                return visitor.visitDbfunc(self)
            else:
                return visitor.visitChildren(self)




    def dbfunc(self):

        localctx = apgParser.DbfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dbfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(apgParser.DBFUNC)
            self.state = 900
            self.func_name()
            self.state = 901
            self.match(apgParser.L_CURLY)
            self.state = 902
            self.func_body()
            self.state = 903
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_func_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_name" ):
                listener.enterFunc_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_name" ):
                listener.exitFunc_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_name" ):
                return visitor.visitFunc_name(self)
            else:
                return visitor.visitChildren(self)




    def func_name(self):

        localctx = apgParser.Func_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_func_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_func_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body" ):
                listener.enterFunc_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body" ):
                listener.exitFunc_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_body" ):
                return visitor.visitFunc_body(self)
            else:
                return visitor.visitChildren(self)




    def func_body(self):

        localctx = apgParser.Func_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_func_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.FieldContext)
            else:
                return self.getTypedRuleContext(apgParser.FieldContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COLON)
            else:
                return self.getToken(apgParser.COLON, i)

        def getRuleIndex(self):
            return apgParser.RULE_schedule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchedule" ):
                listener.enterSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchedule" ):
                listener.exitSchedule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchedule" ):
                return visitor.visitSchedule(self)
            else:
                return visitor.visitChildren(self)




    def schedule(self):

        localctx = apgParser.ScheduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_schedule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.field()
            self.state = 910
            self.match(apgParser.COLON)
            self.state = 911
            self.field()
            self.state = 912
            self.match(apgParser.COLON)
            self.state = 913
            self.field()
            self.state = 914
            self.match(apgParser.COLON)
            self.state = 915
            self.field()
            self.state = 916
            self.match(apgParser.COLON)
            self.state = 917
            self.field()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_(self):
            return self.getTypedRuleContext(apgParser.IntContext,0)


        def sched_range(self):
            return self.getTypedRuleContext(apgParser.Sched_rangeContext,0)


        def sched_list(self):
            return self.getTypedRuleContext(apgParser.Sched_listContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField" ):
                listener.enterField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField" ):
                listener.exitField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField" ):
                return visitor.visitField(self)
            else:
                return visitor.visitChildren(self)




    def field(self):

        localctx = apgParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 919
                self.int_()
                pass

            elif la_ == 2:
                self.state = 920
                self.sched_range()
                pass

            elif la_ == 3:
                self.state = 921
                self.sched_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sched_rangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.IntContext)
            else:
                return self.getTypedRuleContext(apgParser.IntContext,i)


        def SUB(self):
            return self.getToken(apgParser.SUB, 0)

        def getRuleIndex(self):
            return apgParser.RULE_sched_range

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSched_range" ):
                listener.enterSched_range(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSched_range" ):
                listener.exitSched_range(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSched_range" ):
                return visitor.visitSched_range(self)
            else:
                return visitor.visitChildren(self)




    def sched_range(self):

        localctx = apgParser.Sched_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_sched_range)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.int_()
            self.state = 925
            self.match(apgParser.SUB)
            self.state = 926
            self.int_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sched_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_list(self):
            return self.getTypedRuleContext(apgParser.Int_listContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_sched_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSched_list" ):
                listener.enterSched_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSched_list" ):
                listener.exitSched_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSched_list" ):
                return visitor.visitSched_list(self)
            else:
                return visitor.visitChildren(self)




    def sched_list(self):

        localctx = apgParser.Sched_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_sched_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.int_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Business_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE(self):
            return self.getToken(apgParser.RULE, 0)

        def rule_name(self):
            return self.getTypedRuleContext(apgParser.Rule_nameContext,0)


        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def businessRule(self):
            return self.getTypedRuleContext(apgParser.BusinessRuleContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def getRuleIndex(self):
            return apgParser.RULE_business_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBusiness_rule" ):
                listener.enterBusiness_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBusiness_rule" ):
                listener.exitBusiness_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBusiness_rule" ):
                return visitor.visitBusiness_rule(self)
            else:
                return visitor.visitChildren(self)




    def business_rule(self):

        localctx = apgParser.Business_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_business_rule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(apgParser.RULE)
            self.state = 931
            self.rule_name()
            self.state = 932
            self.match(apgParser.EQ)
            self.state = 933
            self.match(apgParser.L_CURLY)
            self.state = 934
            self.businessRule()
            self.state = 935
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BusinessRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self):
            return self.getTypedRuleContext(apgParser.ConditionContext,0)


        def actionExpr(self):
            return self.getTypedRuleContext(apgParser.ActionExprContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_businessRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBusinessRule" ):
                listener.enterBusinessRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBusinessRule" ):
                listener.exitBusinessRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBusinessRule" ):
                return visitor.visitBusinessRule(self)
            else:
                return visitor.visitChildren(self)




    def businessRule(self):

        localctx = apgParser.BusinessRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_businessRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.condition()
            self.state = 938
            self.actionExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return apgParser.RULE_condition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IfExpressionContext(ConditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ConditionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ifExpr(self):
            return self.getTypedRuleContext(apgParser.IfExprContext,0)

        def COLON(self):
            return self.getToken(apgParser.COLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpression" ):
                listener.enterIfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpression" ):
                listener.exitIfExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExpression" ):
                return visitor.visitIfExpression(self)
            else:
                return visitor.visitChildren(self)


    class EveryTimeExpressionContext(ConditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ConditionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def schedule(self):
            return self.getTypedRuleContext(apgParser.ScheduleContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEveryTimeExpression" ):
                listener.enterEveryTimeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEveryTimeExpression" ):
                listener.exitEveryTimeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEveryTimeExpression" ):
                return visitor.visitEveryTimeExpression(self)
            else:
                return visitor.visitChildren(self)


    class AtTimeExpressionContext(ConditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ConditionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def schedule(self):
            return self.getTypedRuleContext(apgParser.ScheduleContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtTimeExpression" ):
                listener.enterAtTimeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtTimeExpression" ):
                listener.exitAtTimeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtTimeExpression" ):
                return visitor.visitAtTimeExpression(self)
            else:
                return visitor.visitChildren(self)


    class OnEventExpressionContext(ConditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ConditionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def event_desc(self):
            return self.getTypedRuleContext(apgParser.Event_descContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnEventExpression" ):
                listener.enterOnEventExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnEventExpression" ):
                listener.exitOnEventExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnEventExpression" ):
                return visitor.visitOnEventExpression(self)
            else:
                return visitor.visitChildren(self)



    def condition(self):

        localctx = apgParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_condition)
        try:
            self.state = 958
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [160]:
                localctx = apgParser.IfExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.ifExpr()
                self.state = 941
                self.match(apgParser.COLON)
                pass
            elif token in [77]:
                localctx = apgParser.AtTimeExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.match(apgParser.T__76)
                self.state = 944
                self.match(apgParser.L_PAR)
                self.state = 945
                self.schedule()
                self.state = 946
                self.match(apgParser.R_PAR)
                pass
            elif token in [78]:
                localctx = apgParser.EveryTimeExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 948
                self.match(apgParser.T__77)
                self.state = 949
                self.match(apgParser.L_PAR)
                self.state = 950
                self.schedule()
                self.state = 951
                self.match(apgParser.R_PAR)
                pass
            elif token in [70]:
                localctx = apgParser.OnEventExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 953
                self.match(apgParser.T__69)
                self.state = 954
                self.match(apgParser.L_PAR)
                self.state = 955
                self.event_desc()
                self.state = 956
                self.match(apgParser.R_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(apgParser.IF, 0)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)


        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def getRuleIndex(self):
            return apgParser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExpr" ):
                return visitor.visitIfExpr(self)
            else:
                return visitor.visitChildren(self)




    def ifExpr(self):

        localctx = apgParser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(apgParser.IF)
            self.state = 961
            self.match(apgParser.L_PAR)
            self.state = 962
            self.expr(0)
            self.state = 963
            self.match(apgParser.R_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_rule_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_name" ):
                listener.enterRule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_name" ):
                listener.exitRule_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_name" ):
                return visitor.visitRule_name(self)
            else:
                return visitor.visitChildren(self)




    def rule_name(self):

        localctx = apgParser.Rule_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_rule_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_event_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_desc" ):
                listener.enterEvent_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_desc" ):
                listener.exitEvent_desc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_desc" ):
                return visitor.visitEvent_desc(self)
            else:
                return visitor.visitChildren(self)




    def event_desc(self):

        localctx = apgParser.Event_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_event_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def action_value(self):
            return self.getTypedRuleContext(apgParser.Action_valueContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_actionExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionExpr" ):
                listener.enterActionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionExpr" ):
                listener.exitActionExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActionExpr" ):
                return visitor.visitActionExpr(self)
            else:
                return visitor.visitChildren(self)




    def actionExpr(self):

        localctx = apgParser.ActionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_actionExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(apgParser.T__78)
            self.state = 970
            self.action_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Action_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def action_verb(self):
            return self.getTypedRuleContext(apgParser.Action_verbContext,0)


        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)

        def action_object(self):
            return self.getTypedRuleContext(apgParser.Action_objectContext,0)


        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def script_name(self):
            return self.getTypedRuleContext(apgParser.Script_nameContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_action_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_value" ):
                listener.enterAction_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_value" ):
                listener.exitAction_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_value" ):
                return visitor.visitAction_value(self)
            else:
                return visitor.visitChildren(self)




    def action_value(self):

        localctx = apgParser.Action_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_action_value)
        try:
            self.state = 982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [243]:
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.action_verb()
                self.state = 979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 973
                    self.match(apgParser.L_PAR)
                    self.state = 974
                    self.action_object()
                    self.state = 975
                    self.match(apgParser.R_PAR)

                elif la_ == 2:
                    self.state = 977
                    self.match(apgParser.L_PAR)
                    self.state = 978
                    self.match(apgParser.R_PAR)


                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 981
                self.script_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Action_verbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(apgParser.IdentContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_action_verb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_verb" ):
                listener.enterAction_verb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_verb" ):
                listener.exitAction_verb(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_verb" ):
                return visitor.visitAction_verb(self)
            else:
                return visitor.visitChildren(self)




    def action_verb(self):

        localctx = apgParser.Action_verbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_action_verb)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.ident()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Action_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_list(self):
            return self.getTypedRuleContext(apgParser.String_listContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_action_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_object" ):
                listener.enterAction_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_object" ):
                listener.exitAction_object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_object" ):
                return visitor.visitAction_object(self)
            else:
                return visitor.visitChildren(self)




    def action_object(self):

        localctx = apgParser.Action_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_action_object)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.string_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return apgParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class InverseTrigonometricSinContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInverseTrigonometricSin" ):
                listener.enterInverseTrigonometricSin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInverseTrigonometricSin" ):
                listener.exitInverseTrigonometricSin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInverseTrigonometricSin" ):
                return visitor.visitInverseTrigonometricSin(self)
            else:
                return visitor.visitChildren(self)


    class StatisticalMinimumContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN(self):
            return self.getToken(apgParser.MIN, 0)
        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr_list(self):
            return self.getTypedRuleContext(apgParser.Expr_listContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatisticalMinimum" ):
                listener.enterStatisticalMinimum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatisticalMinimum" ):
                listener.exitStatisticalMinimum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatisticalMinimum" ):
                return visitor.visitStatisticalMinimum(self)
            else:
                return visitor.visitChildren(self)


    class BinaryAdditionSubtractionContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.ExprContext)
            else:
                return self.getTypedRuleContext(apgParser.ExprContext,i)

        def ADD(self):
            return self.getToken(apgParser.ADD, 0)
        def SUB(self):
            return self.getToken(apgParser.SUB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryAdditionSubtraction" ):
                listener.enterBinaryAdditionSubtraction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryAdditionSubtraction" ):
                listener.exitBinaryAdditionSubtraction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryAdditionSubtraction" ):
                return visitor.visitBinaryAdditionSubtraction(self)
            else:
                return visitor.visitChildren(self)


    class BooleanCombinationContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.ExprContext)
            else:
                return self.getTypedRuleContext(apgParser.ExprContext,i)

        def booleanOp(self):
            return self.getTypedRuleContext(apgParser.BooleanOpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanCombination" ):
                listener.enterBooleanCombination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanCombination" ):
                listener.exitBooleanCombination(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanCombination" ):
                return visitor.visitBooleanCombination(self)
            else:
                return visitor.visitChildren(self)


    class NestedExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpr" ):
                listener.enterNestedExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpr" ):
                listener.exitNestedExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedExpr" ):
                return visitor.visitNestedExpr(self)
            else:
                return visitor.visitChildren(self)


    class TrigonometricCosContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigonometricCos" ):
                listener.enterTrigonometricCos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigonometricCos" ):
                listener.exitTrigonometricCos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigonometricCos" ):
                return visitor.visitTrigonometricCos(self)
            else:
                return visitor.visitChildren(self)


    class InverseTrigonometricTanContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInverseTrigonometricTan" ):
                listener.enterInverseTrigonometricTan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInverseTrigonometricTan" ):
                listener.exitInverseTrigonometricTan(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInverseTrigonometricTan" ):
                return visitor.visitInverseTrigonometricTan(self)
            else:
                return visitor.visitChildren(self)


    class NotExpressionContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(apgParser.NOT, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpression" ):
                return visitor.visitNotExpression(self)
            else:
                return visitor.visitChildren(self)


    class InverseHyperbolicTangentContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInverseHyperbolicTangent" ):
                listener.enterInverseHyperbolicTangent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInverseHyperbolicTangent" ):
                listener.exitInverseHyperbolicTangent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInverseHyperbolicTangent" ):
                return visitor.visitInverseHyperbolicTangent(self)
            else:
                return visitor.visitChildren(self)


    class BinaryComparisonContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.ExprContext)
            else:
                return self.getTypedRuleContext(apgParser.ExprContext,i)

        def comparisonOp(self):
            return self.getTypedRuleContext(apgParser.ComparisonOpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparison" ):
                listener.enterBinaryComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparison" ):
                listener.exitBinaryComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryComparison" ):
                return visitor.visitBinaryComparison(self)
            else:
                return visitor.visitChildren(self)


    class TrigonometricTanContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigonometricTan" ):
                listener.enterTrigonometricTan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigonometricTan" ):
                listener.exitTrigonometricTan(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigonometricTan" ):
                return visitor.visitTrigonometricTan(self)
            else:
                return visitor.visitChildren(self)


    class LiteralExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(apgParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpr" ):
                listener.enterLiteralExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpr" ):
                listener.exitLiteralExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpr" ):
                return visitor.visitLiteralExpr(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(apgParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpr" ):
                listener.enterFunctionCallExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpr" ):
                listener.exitFunctionCallExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallExpr" ):
                return visitor.visitFunctionCallExpr(self)
            else:
                return visitor.visitChildren(self)


    class StatisticalAverageContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr_list(self):
            return self.getTypedRuleContext(apgParser.Expr_listContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatisticalAverage" ):
                listener.enterStatisticalAverage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatisticalAverage" ):
                listener.exitStatisticalAverage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatisticalAverage" ):
                return visitor.visitStatisticalAverage(self)
            else:
                return visitor.visitChildren(self)


    class BinaryMultiplicationDivContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.ExprContext)
            else:
                return self.getTypedRuleContext(apgParser.ExprContext,i)

        def MUL(self):
            return self.getToken(apgParser.MUL, 0)
        def DIV(self):
            return self.getToken(apgParser.DIV, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryMultiplicationDiv" ):
                listener.enterBinaryMultiplicationDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryMultiplicationDiv" ):
                listener.exitBinaryMultiplicationDiv(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryMultiplicationDiv" ):
                return visitor.visitBinaryMultiplicationDiv(self)
            else:
                return visitor.visitChildren(self)


    class HyperbolicCosineContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHyperbolicCosine" ):
                listener.enterHyperbolicCosine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHyperbolicCosine" ):
                listener.exitHyperbolicCosine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHyperbolicCosine" ):
                return visitor.visitHyperbolicCosine(self)
            else:
                return visitor.visitChildren(self)


    class StatisticalMaximumContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MAX(self):
            return self.getToken(apgParser.MAX, 0)
        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr_list(self):
            return self.getTypedRuleContext(apgParser.Expr_listContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatisticalMaximum" ):
                listener.enterStatisticalMaximum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatisticalMaximum" ):
                listener.exitStatisticalMaximum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatisticalMaximum" ):
                return visitor.visitStatisticalMaximum(self)
            else:
                return visitor.visitChildren(self)


    class TrigonometricSinContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigonometricSin" ):
                listener.enterTrigonometricSin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigonometricSin" ):
                listener.exitTrigonometricSin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigonometricSin" ):
                return visitor.visitTrigonometricSin(self)
            else:
                return visitor.visitChildren(self)


    class InverseHyperbolicCosineContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInverseHyperbolicCosine" ):
                listener.enterInverseHyperbolicCosine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInverseHyperbolicCosine" ):
                listener.exitInverseHyperbolicCosine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInverseHyperbolicCosine" ):
                return visitor.visitInverseHyperbolicCosine(self)
            else:
                return visitor.visitChildren(self)


    class InverseHyperbolicSineContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInverseHyperbolicSine" ):
                listener.enterInverseHyperbolicSine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInverseHyperbolicSine" ):
                listener.exitInverseHyperbolicSine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInverseHyperbolicSine" ):
                return visitor.visitInverseHyperbolicSine(self)
            else:
                return visitor.visitChildren(self)


    class StatisticalSumContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr_list(self):
            return self.getTypedRuleContext(apgParser.Expr_listContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatisticalSum" ):
                listener.enterStatisticalSum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatisticalSum" ):
                listener.exitStatisticalSum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatisticalSum" ):
                return visitor.visitStatisticalSum(self)
            else:
                return visitor.visitChildren(self)


    class HyperbolicTangentContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHyperbolicTangent" ):
                listener.enterHyperbolicTangent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHyperbolicTangent" ):
                listener.exitHyperbolicTangent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHyperbolicTangent" ):
                return visitor.visitHyperbolicTangent(self)
            else:
                return visitor.visitChildren(self)


    class InverseTrigonometricCosContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInverseTrigonometricCos" ):
                listener.enterInverseTrigonometricCos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInverseTrigonometricCos" ):
                listener.exitInverseTrigonometricCos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInverseTrigonometricCos" ):
                return visitor.visitInverseTrigonometricCos(self)
            else:
                return visitor.visitChildren(self)


    class HyperbolicSineContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHyperbolicSine" ):
                listener.enterHyperbolicSine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHyperbolicSine" ):
                listener.exitHyperbolicSine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHyperbolicSine" ):
                return visitor.visitHyperbolicSine(self)
            else:
                return visitor.visitChildren(self)


    class UnaryMinusContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUB(self):
            return self.getToken(apgParser.SUB, 0)
        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryMinus" ):
                listener.enterUnaryMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryMinus" ):
                listener.exitUnaryMinus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryMinus" ):
                return visitor.visitUnaryMinus(self)
            else:
                return visitor.visitChildren(self)


    class IdentExpressionContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ident(self):
            return self.getTypedRuleContext(apgParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentExpression" ):
                listener.enterIdentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentExpression" ):
                listener.exitIdentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentExpression" ):
                return visitor.visitIdentExpression(self)
            else:
                return visitor.visitChildren(self)


    class IdentFunctionContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a apgParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ident(self):
            return self.getTypedRuleContext(apgParser.IdentContext,0)

        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)
        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentFunction" ):
                listener.enterIdentFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentFunction" ):
                listener.exitIdentFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentFunction" ):
                return visitor.visitIdentFunction(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = apgParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                localctx = apgParser.IdentExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 989
                self.ident()
                pass

            elif la_ == 2:
                localctx = apgParser.IdentFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 990
                self.ident()
                self.state = 991
                self.match(apgParser.L_PAR)
                self.state = 992
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 3:
                localctx = apgParser.LiteralExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 994
                self.literal()
                pass

            elif la_ == 4:
                localctx = apgParser.FunctionCallExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 995
                self.functionCall()
                pass

            elif la_ == 5:
                localctx = apgParser.NestedExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 996
                self.match(apgParser.L_PAR)
                self.state = 997
                self.expr(0)
                self.state = 998
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 6:
                localctx = apgParser.UnaryMinusContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1000
                self.match(apgParser.SUB)
                self.state = 1001
                self.expr(18)
                pass

            elif la_ == 7:
                localctx = apgParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1002
                self.match(apgParser.NOT)
                self.state = 1003
                self.expr(17)
                pass

            elif la_ == 8:
                localctx = apgParser.TrigonometricSinContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1004
                self.match(apgParser.T__79)
                self.state = 1005
                self.match(apgParser.L_PAR)
                self.state = 1006
                self.expr(0)
                self.state = 1007
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 9:
                localctx = apgParser.TrigonometricCosContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1009
                self.match(apgParser.T__80)
                self.state = 1010
                self.match(apgParser.L_PAR)
                self.state = 1011
                self.expr(0)
                self.state = 1012
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 10:
                localctx = apgParser.TrigonometricTanContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1014
                self.match(apgParser.T__81)
                self.state = 1015
                self.match(apgParser.L_PAR)
                self.state = 1016
                self.expr(0)
                self.state = 1017
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 11:
                localctx = apgParser.InverseTrigonometricSinContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1019
                self.match(apgParser.T__82)
                self.state = 1020
                self.match(apgParser.L_PAR)
                self.state = 1021
                self.expr(0)
                self.state = 1022
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 12:
                localctx = apgParser.InverseTrigonometricCosContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1024
                self.match(apgParser.T__83)
                self.state = 1025
                self.match(apgParser.L_PAR)
                self.state = 1026
                self.expr(0)
                self.state = 1027
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 13:
                localctx = apgParser.InverseTrigonometricTanContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1029
                self.match(apgParser.T__84)
                self.state = 1030
                self.match(apgParser.L_PAR)
                self.state = 1031
                self.expr(0)
                self.state = 1032
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 14:
                localctx = apgParser.HyperbolicSineContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1034
                self.match(apgParser.T__85)
                self.state = 1035
                self.match(apgParser.L_PAR)
                self.state = 1036
                self.expr(0)
                self.state = 1037
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 15:
                localctx = apgParser.HyperbolicCosineContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1039
                self.match(apgParser.T__86)
                self.state = 1040
                self.match(apgParser.L_PAR)
                self.state = 1041
                self.expr(0)
                self.state = 1042
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 16:
                localctx = apgParser.HyperbolicTangentContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1044
                self.match(apgParser.T__87)
                self.state = 1045
                self.match(apgParser.L_PAR)
                self.state = 1046
                self.expr(0)
                self.state = 1047
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 17:
                localctx = apgParser.InverseHyperbolicSineContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1049
                self.match(apgParser.T__88)
                self.state = 1050
                self.match(apgParser.L_PAR)
                self.state = 1051
                self.expr(0)
                self.state = 1052
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 18:
                localctx = apgParser.InverseHyperbolicCosineContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1054
                self.match(apgParser.T__89)
                self.state = 1055
                self.match(apgParser.L_PAR)
                self.state = 1056
                self.expr(0)
                self.state = 1057
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 19:
                localctx = apgParser.InverseHyperbolicTangentContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1059
                self.match(apgParser.T__90)
                self.state = 1060
                self.match(apgParser.L_PAR)
                self.state = 1061
                self.expr(0)
                self.state = 1062
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 20:
                localctx = apgParser.StatisticalAverageContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1064
                self.match(apgParser.T__91)
                self.state = 1065
                self.match(apgParser.L_PAR)
                self.state = 1066
                self.expr_list()
                self.state = 1067
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 21:
                localctx = apgParser.StatisticalMinimumContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1069
                self.match(apgParser.MIN)
                self.state = 1070
                self.match(apgParser.L_PAR)
                self.state = 1071
                self.expr_list()
                self.state = 1072
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 22:
                localctx = apgParser.StatisticalMaximumContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1074
                self.match(apgParser.MAX)
                self.state = 1075
                self.match(apgParser.L_PAR)
                self.state = 1076
                self.expr_list()
                self.state = 1077
                self.match(apgParser.R_PAR)
                pass

            elif la_ == 23:
                localctx = apgParser.StatisticalSumContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1079
                self.match(apgParser.T__92)
                self.state = 1080
                self.match(apgParser.L_PAR)
                self.state = 1081
                self.expr_list()
                self.state = 1082
                self.match(apgParser.R_PAR)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1102
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1100
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                    if la_ == 1:
                        localctx = apgParser.BinaryMultiplicationDivContext(self, apgParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1086
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1087
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==105 or _la==116):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1088
                        self.expr(23)
                        pass

                    elif la_ == 2:
                        localctx = apgParser.BinaryAdditionSubtractionContext(self, apgParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1089
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1090
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==101 or _la==123):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1091
                        self.expr(22)
                        pass

                    elif la_ == 3:
                        localctx = apgParser.BooleanCombinationContext(self, apgParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1092
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1093
                        self.booleanOp()
                        self.state = 1094
                        self.expr(21)
                        pass

                    elif la_ == 4:
                        localctx = apgParser.BinaryComparisonContext(self, apgParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1096
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1097
                        self.comparisonOp()
                        self.state = 1098
                        self.expr(20)
                        pass

             
                self.state = 1104
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.ExprContext)
            else:
                return self.getTypedRuleContext(apgParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list" ):
                listener.enterExpr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list" ):
                listener.exitExpr_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_list" ):
                return visitor.visitExpr_list(self)
            else:
                return visitor.visitChildren(self)




    def expr_list(self):

        localctx = apgParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.expr(0)
            self.state = 1110
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1106
                    self.match(apgParser.COMMA)
                    self.state = 1107
                    self.expr(0) 
                self.state = 1112
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 1113
                self.match(apgParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_(self):
            return self.getTypedRuleContext(apgParser.IntContext,0)


        def FLOAT(self):
            return self.getToken(apgParser.FLOAT, 0)

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def Bool(self):
            return self.getToken(apgParser.Bool, 0)

        def getRuleIndex(self):
            return apgParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = apgParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_literal)
        try:
            self.state = 1120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1116
                self.int_()
                pass
            elif token in [157]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1117
                self.match(apgParser.FLOAT)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1118
                self.string()
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1119
                self.match(apgParser.Bool)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(apgParser.AND, 0)

        def OR(self):
            return self.getToken(apgParser.OR, 0)

        def XOR(self):
            return self.getToken(apgParser.XOR, 0)

        def getRuleIndex(self):
            return apgParser.RULE_booleanOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOp" ):
                listener.enterBooleanOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOp" ):
                listener.exitBooleanOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOp" ):
                return visitor.visitBooleanOp(self)
            else:
                return visitor.visitChildren(self)




    def booleanOp(self):

        localctx = apgParser.BooleanOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_booleanOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            _la = self._input.LA(1)
            if not(_la==102 or _la==118 or _la==178):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def NEQ(self):
            return self.getToken(apgParser.NEQ, 0)

        def LT(self):
            return self.getToken(apgParser.LT, 0)

        def LTE(self):
            return self.getToken(apgParser.LTE, 0)

        def GT(self):
            return self.getToken(apgParser.GT, 0)

        def GTE(self):
            return self.getToken(apgParser.GTE, 0)

        def getRuleIndex(self):
            return apgParser.RULE_comparisonOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOp" ):
                listener.enterComparisonOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOp" ):
                listener.exitComparisonOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOp" ):
                return visitor.visitComparisonOp(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOp(self):

        localctx = apgParser.ComparisonOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_comparisonOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            _la = self._input.LA(1)
            if not(((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 1223) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(apgParser.Function_nameContext,0)


        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)

        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def param_list(self):
            return self.getTypedRuleContext(apgParser.Param_listContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = apgParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self.match(apgParser.T__93)
            self.state = 1127
            self.function_name()
            self.state = 1133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 1128
                self.match(apgParser.L_PAR)
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128 or _la==243:
                    self.state = 1129
                    self.param_list()


                self.state = 1132
                self.match(apgParser.R_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = apgParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.String_listContext)
            else:
                return self.getTypedRuleContext(apgParser.String_listContext,i)


        def ident_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Ident_listContext)
            else:
                return self.getTypedRuleContext(apgParser.Ident_listContext,i)


        def getRuleIndex(self):
            return apgParser.RULE_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_list" ):
                listener.enterParam_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_list" ):
                listener.exitParam_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_list" ):
                return visitor.visitParam_list(self)
            else:
                return visitor.visitChildren(self)




    def param_list(self):

        localctx = apgParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1139
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128]:
                    self.state = 1137
                    self.string_list()
                    pass
                elif token in [243]:
                    self.state = 1138
                    self.ident_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1141 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==128 or _la==243):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trigger_name(self):
            return self.getTypedRuleContext(apgParser.Trigger_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(apgParser.Table_nameContext,0)


        def trigger_event(self):
            return self.getTypedRuleContext(apgParser.Trigger_eventContext,0)


        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def trigger_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Trigger_statementContext)
            else:
                return self.getTypedRuleContext(apgParser.Trigger_statementContext,i)


        def getRuleIndex(self):
            return apgParser.RULE_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger" ):
                listener.enterTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger" ):
                listener.exitTrigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger" ):
                return visitor.visitTrigger(self)
            else:
                return visitor.visitChildren(self)




    def trigger(self):

        localctx = apgParser.TriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.match(apgParser.T__94)
            self.state = 1144
            self.trigger_name()
            self.state = 1145
            self.match(apgParser.T__69)
            self.state = 1146
            self.table_name()
            self.state = 1147
            self.trigger_event()
            self.state = 1148
            self.match(apgParser.L_CURLY)
            self.state = 1150 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1149
                self.trigger_statement()
                self.state = 1152 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==245):
                    break

            self.state = 1154
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_name" ):
                return visitor.visitTrigger_name(self)
            else:
                return visitor.visitChildren(self)




    def trigger_name(self):

        localctx = apgParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_eventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DML_ACTION(self):
            return self.getToken(apgParser.DML_ACTION, 0)

        def getRuleIndex(self):
            return apgParser.RULE_trigger_event

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_event" ):
                listener.enterTrigger_event(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_event" ):
                listener.exitTrigger_event(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_event" ):
                return visitor.visitTrigger_event(self)
            else:
                return visitor.visitChildren(self)




    def trigger_event(self):

        localctx = apgParser.Trigger_eventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_trigger_event)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(apgParser.DML_ACTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt_list(self):
            return self.getTypedRuleContext(apgParser.Sql_stmt_listContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_trigger_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_statement" ):
                listener.enterTrigger_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_statement" ):
                listener.exitTrigger_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_statement" ):
                return visitor.visitTrigger_statement(self)
            else:
                return visitor.visitChildren(self)




    def trigger_statement(self):

        localctx = apgParser.Trigger_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_trigger_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.sql_stmt_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(apgParser.Sql_stmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.SEMI_COLON)
            else:
                return self.getToken(apgParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return apgParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_stmt_list" ):
                return visitor.visitSql_stmt_list(self)
            else:
                return visitor.visitChildren(self)




    def sql_stmt_list(self):

        localctx = apgParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.sql_stmt()
            self.state = 1167
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1163
                    self.match(apgParser.SEMI_COLON)
                    self.state = 1164
                    self.sql_stmt() 
                self.state = 1169
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 1170
                self.match(apgParser.SEMI_COLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DML_ACTION(self):
            return self.getToken(apgParser.DML_ACTION, 0)

        def table_name(self):
            return self.getTypedRuleContext(apgParser.Table_nameContext,0)


        def view_name(self):
            return self.getTypedRuleContext(apgParser.View_nameContext,0)


        def column_assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Column_assignmentContext)
            else:
                return self.getTypedRuleContext(apgParser.Column_assignmentContext,i)


        def WHERE(self):
            return self.getToken(apgParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(apgParser.COMMA)
            else:
                return self.getToken(apgParser.COMMA, i)

        def getRuleIndex(self):
            return apgParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_stmt" ):
                return visitor.visitSql_stmt(self)
            else:
                return visitor.visitChildren(self)




    def sql_stmt(self):

        localctx = apgParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self.match(apgParser.DML_ACTION)
            self.state = 1176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 1174
                self.table_name()
                pass

            elif la_ == 2:
                self.state = 1175
                self.view_name()
                pass


            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 1178
                self.match(apgParser.T__95)
                self.state = 1179
                self.column_assignment()
                self.state = 1184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 1180
                    self.match(apgParser.COMMA)
                    self.state = 1181
                    self.column_assignment()
                    self.state = 1186
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1187
                self.match(apgParser.WHERE)
                self.state = 1188
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(apgParser.Column_nameContext,0)


        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_column_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_assignment" ):
                listener.enterColumn_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_assignment" ):
                listener.exitColumn_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_assignment" ):
                return visitor.visitColumn_assignment(self)
            else:
                return visitor.visitChildren(self)




    def column_assignment(self):

        localctx = apgParser.Column_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_column_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.column_name()
            self.state = 1193
            self.match(apgParser.EQ)
            self.state = 1194
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def script_lang(self):
            return self.getTypedRuleContext(apgParser.Script_langContext,0)


        def EQ(self):
            return self.getToken(apgParser.EQ, 0)

        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def script_body(self):
            return self.getTypedRuleContext(apgParser.Script_bodyContext,0)


        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def script_name(self):
            return self.getTypedRuleContext(apgParser.Script_nameContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript" ):
                listener.enterScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript" ):
                listener.exitScript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScript" ):
                return visitor.visitScript(self)
            else:
                return visitor.visitChildren(self)




    def script(self):

        localctx = apgParser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(apgParser.T__96)
            self.state = 1197
            self.script_lang()
            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 1198
                self.script_name()


            self.state = 1201
            self.match(apgParser.EQ)
            self.state = 1202
            self.match(apgParser.L_CURLY)
            self.state = 1203
            self.script_body()
            self.state = 1204
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Script_langContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ZSH(self):
            return self.getToken(apgParser.ZSH, 0)

        def BASH(self):
            return self.getToken(apgParser.BASH, 0)

        def CSH(self):
            return self.getToken(apgParser.CSH, 0)

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_script_lang

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript_lang" ):
                listener.enterScript_lang(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript_lang" ):
                listener.exitScript_lang(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScript_lang" ):
                return visitor.visitScript_lang(self)
            else:
                return visitor.visitChildren(self)




    def script_lang(self):

        localctx = apgParser.Script_langContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_script_lang)
        try:
            self.state = 1210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [240]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1206
                self.match(apgParser.ZSH)
                pass
            elif token in [242]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1207
                self.match(apgParser.BASH)
                pass
            elif token in [241]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1208
                self.match(apgParser.CSH)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1209
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Script_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_list(self):
            return self.getTypedRuleContext(apgParser.String_listContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_script_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript_body" ):
                listener.enterScript_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript_body" ):
                listener.exitScript_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScript_body" ):
                return visitor.visitScript_body(self)
            else:
                return visitor.visitChildren(self)




    def script_body(self):

        localctx = apgParser.Script_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_script_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.string_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Script_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_script_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript_name" ):
                listener.enterScript_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript_name" ):
                listener.exitScript_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScript_name" ):
                return visitor.visitScript_name(self)
            else:
                return visitor.visitChildren(self)




    def script_name(self):

        localctx = apgParser.Script_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_script_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WorkflowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def workflow_name(self):
            return self.getTypedRuleContext(apgParser.Workflow_nameContext,0)


        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def workflow_step(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Workflow_stepContext)
            else:
                return self.getTypedRuleContext(apgParser.Workflow_stepContext,i)


        def getRuleIndex(self):
            return apgParser.RULE_workflow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWorkflow" ):
                listener.enterWorkflow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWorkflow" ):
                listener.exitWorkflow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWorkflow" ):
                return visitor.visitWorkflow(self)
            else:
                return visitor.visitChildren(self)




    def workflow(self):

        localctx = apgParser.WorkflowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_workflow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(apgParser.T__97)
            self.state = 1217
            self.workflow_name()
            self.state = 1218
            self.match(apgParser.L_CURLY)
            self.state = 1220 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1219
                self.workflow_step()
                self.state = 1222 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==99):
                    break

            self.state = 1224
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Workflow_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_workflow_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWorkflow_name" ):
                listener.enterWorkflow_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWorkflow_name" ):
                listener.exitWorkflow_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWorkflow_name" ):
                return visitor.visitWorkflow_name(self)
            else:
                return visitor.visitChildren(self)




    def workflow_name(self):

        localctx = apgParser.Workflow_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_workflow_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Workflow_stepContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def step_name(self):
            return self.getTypedRuleContext(apgParser.Step_nameContext,0)


        def L_CURLY(self):
            return self.getToken(apgParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(apgParser.R_CURLY, 0)

        def workflow_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apgParser.Workflow_statementContext)
            else:
                return self.getTypedRuleContext(apgParser.Workflow_statementContext,i)


        def getRuleIndex(self):
            return apgParser.RULE_workflow_step

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWorkflow_step" ):
                listener.enterWorkflow_step(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWorkflow_step" ):
                listener.exitWorkflow_step(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWorkflow_step" ):
                return visitor.visitWorkflow_step(self)
            else:
                return visitor.visitChildren(self)




    def workflow_step(self):

        localctx = apgParser.Workflow_stepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_workflow_step)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(apgParser.T__98)
            self.state = 1229
            self.step_name()
            self.state = 1230
            self.match(apgParser.T__78)
            self.state = 1231
            self.match(apgParser.L_CURLY)
            self.state = 1233 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1232
                self.workflow_statement()
                self.state = 1235 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 6210045970808831) != 0) or ((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 105553116266625) != 0) or _la==243 or _la==245):
                    break

            self.state = 1237
            self.match(apgParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Step_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_attr(self):
            return self.getTypedRuleContext(apgParser.Name_attrContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_step_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStep_name" ):
                listener.enterStep_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStep_name" ):
                listener.exitStep_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStep_name" ):
                return visitor.visitStep_name(self)
            else:
                return visitor.visitChildren(self)




    def step_name(self):

        localctx = apgParser.Step_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_step_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.name_attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Workflow_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt_list(self):
            return self.getTypedRuleContext(apgParser.Sql_stmt_listContext,0)


        def L_PAR(self):
            return self.getToken(apgParser.L_PAR, 0)

        def string(self):
            return self.getTypedRuleContext(apgParser.StringContext,0)


        def R_PAR(self):
            return self.getToken(apgParser.R_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(apgParser.ExprContext,0)


        def actionExpr(self):
            return self.getTypedRuleContext(apgParser.ActionExprContext,0)


        def getRuleIndex(self):
            return apgParser.RULE_workflow_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWorkflow_statement" ):
                listener.enterWorkflow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWorkflow_statement" ):
                listener.exitWorkflow_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWorkflow_statement" ):
                return visitor.visitWorkflow_statement(self)
            else:
                return visitor.visitChildren(self)




    def workflow_statement(self):

        localctx = apgParser.Workflow_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_workflow_statement)
        try:
            self.state = 1249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [245]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1241
                self.sql_stmt_list()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1242
                self.match(apgParser.T__99)
                self.state = 1243
                self.match(apgParser.L_PAR)
                self.state = 1244
                self.string()
                self.state = 1245
                self.match(apgParser.R_PAR)
                pass
            elif token in [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 111, 123, 128, 129, 131, 157, 164, 202, 203, 243]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1247
                self.expr(0)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1248
                self.actionExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[94] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         




